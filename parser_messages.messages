parse: UNREACHABLE
##
## Ends in an error in state: 0.
##
## start' -> . start [ # ]
##
## The known suffix of the stack is as follows:
##
##

Expecting a module field.

parse: TYPE UNREACHABLE
##
## Ends in an error in state: 1.
##
## typedef -> TYPE . IDENT boption(OPEN) option(__anonymous_1) EQUAL comptype option(SEMI) [ TYPE REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## TYPE
##

Expecting the name of the type.

parse: TYPE IDENT UNREACHABLE
##
## Ends in an error in state: 2.
##
## typedef -> TYPE IDENT . boption(OPEN) option(__anonymous_1) EQUAL comptype option(SEMI) [ TYPE REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT
##

Expecting an 'open' flag, a colon ':' followed by a supertype, or an equal sign '=' followed by a type definition.

parse: TYPE IDENT OPEN UNREACHABLE
##
## Ends in an error in state: 4.
##
## typedef -> TYPE IDENT boption(OPEN) . option(__anonymous_1) EQUAL comptype option(SEMI) [ TYPE REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT boption(OPEN)
##

Expecting a colon ':' followed by a supertype, or an equal sign '=' followed by a type definition.

parse: TYPE IDENT COLON UNREACHABLE
##
## Ends in an error in state: 5.
##
## option(__anonymous_1) -> COLON . IDENT [ EQUAL ]
##
## The known suffix of the stack is as follows:
## COLON
##

Expecting the name of the supertype.

parse: TYPE IDENT COLON IDENT UNREACHABLE
##
## Ends in an error in state: 7.
##
## typedef -> TYPE IDENT boption(OPEN) option(__anonymous_1) . EQUAL comptype option(SEMI) [ TYPE REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT boption(OPEN) option(__anonymous_1)
##

Expecting an equal sign '=' followed by the type definition.

parse: TYPE IDENT EQUAL UNREACHABLE
##
## Ends in an error in state: 8.
##
## typedef -> TYPE IDENT boption(OPEN) option(__anonymous_1) EQUAL . comptype option(SEMI) [ TYPE REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT boption(OPEN) option(__anonymous_1) EQUAL
##

Expecting a type definition.

parse: TYPE IDENT EQUAL LBRACKET UNREACHABLE
##
## Ends in an error in state: 9.
##
## arraytype -> LBRACKET . fieldtype RBRACKET [ TYPE SEMI REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Expecting a field type.

parse: TYPE IDENT EQUAL LBRACKET MUT UNREACHABLE
##
## Ends in an error in state: 13.
##
## fieldtype -> boption(MUT) . storagetype [ RBRACKET RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## boption(MUT)
##

Expecting a storage type.

parse: LET IDENT COLON AMPERSAND UNREACHABLE
##
## Ends in an error in state: 15.
##
## reftype -> AMPERSAND . boption(QUESTIONMARK) heaptype [ UNREACHABLE TYPE STRING SEMI RPAREN RETURN REC RBRACKET RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACKET LBRACE IS INT IF IDENT GTU FN EQUAL EOF DOT COMMA BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR AS ARROW AMPERSAND ]
##
## The known suffix of the stack is as follows:
## AMPERSAND
##

Expecting a character '?', or a heap type.

parse: LET IDENT COLON AMPERSAND QUESTIONMARK UNREACHABLE
##
## Ends in an error in state: 17.
##
## reftype -> AMPERSAND boption(QUESTIONMARK) . heaptype [ UNREACHABLE TYPE STRING SEMI RPAREN RETURN REC RBRACKET RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACKET LBRACE IS INT IF IDENT GTU FN EQUAL EOF DOT COMMA BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR AS ARROW AMPERSAND ]
##
## The known suffix of the stack is as follows:
## AMPERSAND boption(QUESTIONMARK)
##

Expecting a character '?', a heap type.

parse: TYPE IDENT EQUAL LBRACKET IDENT UNREACHABLE
##
## Ends in an error in state: 11.
##
## arraytype -> LBRACKET fieldtype . RBRACKET [ TYPE SEMI REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## LBRACKET fieldtype
##

Expecting a character ']'.

parse: TYPE IDENT EQUAL LBRACE UNREACHABLE
##
## Ends in an error in state: 22.
##
## structtype -> LBRACE . loption(separated_nonempty_list(COMMA,__anonymous_0)) RBRACE [ TYPE SEMI REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Expecting a field name, or character '}'.

parse: TYPE IDENT EQUAL LBRACE IDENT UNREACHABLE
##
## Ends in an error in state: 23.
##
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT . COLON fieldtype [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT . COLON fieldtype COMMA separated_nonempty_list(COMMA,__anonymous_0) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Expecting a colon ':'.

parse: TYPE IDENT EQUAL LBRACE IDENT COLON UNREACHABLE
##
## Ends in an error in state: 24.
##
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT COLON . fieldtype [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT COLON . fieldtype COMMA separated_nonempty_list(COMMA,__anonymous_0) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

Expecting a field type.

parse: TYPE IDENT EQUAL LBRACE IDENT COLON IDENT UNREACHABLE
##
## Ends in an error in state: 25.
##
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT COLON fieldtype . [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT COLON fieldtype . COMMA separated_nonempty_list(COMMA,__anonymous_0) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON fieldtype
##

Expecting a comma ',', or a character '}'.

parse: TYPE IDENT EQUAL LBRACE IDENT COLON IDENT COMMA UNREACHABLE
##
## Ends in an error in state: 26.
##
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT COLON fieldtype COMMA . separated_nonempty_list(COMMA,__anonymous_0) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON fieldtype COMMA
##

Expecting a field name.

parse: TYPE IDENT EQUAL FN UNREACHABLE
##
## Ends in an error in state: 31.
##
## functype -> FN . resulttype ARROW resulttype [ TYPE SEMI REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## FN
##

Expecting a result type.

parse: TYPE IDENT EQUAL FN LPAREN UNREACHABLE
##
## Ends in an error in state: 32.
##
## resulttype -> LPAREN . RPAREN [ TYPE SEMI REC RBRACE QUOTE LET LBRACE FN EOF ARROW ]
## resulttype -> LPAREN . separated_nonempty_list(COMMA,valtype) RPAREN [ TYPE SEMI REC RBRACE QUOTE LET LBRACE FN EOF ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expecting a value type, or a closing parenthesis ')'.

parse: TYPE IDENT EQUAL FN LPAREN IDENT UNREACHABLE
##
## Ends in an error in state: 35.
##
## separated_nonempty_list(COMMA,valtype) -> valtype . [ RPAREN ]
## separated_nonempty_list(COMMA,valtype) -> valtype . COMMA separated_nonempty_list(COMMA,valtype) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## valtype
##

Expecting a comma ',', or a closing parenthesis ')'.

parse: TYPE IDENT EQUAL FN LPAREN IDENT COMMA UNREACHABLE
##
## Ends in an error in state: 36.
##
## separated_nonempty_list(COMMA,valtype) -> valtype COMMA . separated_nonempty_list(COMMA,valtype) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## valtype COMMA
##

Expecting a value type.

parse: TYPE IDENT EQUAL FN IDENT UNREACHABLE
##
## Ends in an error in state: 42.
##
## functype -> FN resulttype . ARROW resulttype [ TYPE SEMI REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## FN resulttype
##

Expecting an arrow '->'.

parse: TYPE IDENT EQUAL FN IDENT ARROW UNREACHABLE
##
## Ends in an error in state: 43.
##
## functype -> FN resulttype ARROW . resulttype [ TYPE SEMI REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## FN resulttype ARROW
##

Expecting a result type.

parse: REC UNREACHABLE
##
## Ends in an error in state: 51.
##
## rectype -> REC . LBRACE list(typedef) RBRACE [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## REC
##

Expecting a character '{'.

parse: REC LBRACE UNREACHABLE
##
## Ends in an error in state: 52.
##
## rectype -> REC LBRACE . list(typedef) RBRACE [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## REC LBRACE
##

Expecting keyword 'type', or character '}'.

parse: REC LBRACE TYPE IDENT EQUAL LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 47.
##
## typedef -> TYPE IDENT boption(OPEN) option(__anonymous_1) EQUAL comptype . option(SEMI) [ TYPE REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT boption(OPEN) option(__anonymous_1) EQUAL comptype
##

Expecting keyword 'type', or character '}'.

parse: LET UNREACHABLE
##
## Ends in an error in state: 57.
##
## global -> LET . IDENT option(__anonymous_11) EQUAL instr option(SEMI) [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## LET
##

Expecting the name of the global variable.

parse: LET IDENT UNREACHABLE
##
## Ends in an error in state: 58.
##
## global -> LET IDENT . option(__anonymous_11) EQUAL instr option(SEMI) [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT
##

Expecting a colon ':' followed by the type of the global, or an equal sign '=' followed by its definition.

parse: LET IDENT COLON UNREACHABLE
##
## Ends in an error in state: 59.
##
## option(__anonymous_11) -> COLON . boption(MUT) valtype [ EQUAL ]
##
## The known suffix of the stack is as follows:
## COLON
##

Expecting a global type.

parse: LET IDENT COLON IDENT UNREACHABLE
##
## Ends in an error in state: 62.
##
## global -> LET IDENT option(__anonymous_11) . EQUAL instr option(SEMI) [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT option(__anonymous_11)
##

Expecting an equal sign '=' followed by an instruction.

parse: LET IDENT EQUAL UNDERSCORE
##
## Ends in an error in state: 63.
##
## global -> LET IDENT option(__anonymous_11) EQUAL . instr option(SEMI) [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT option(__anonymous_11) EQUAL
##

Expecting an instruction.

parse: LET IDENT EQUAL QUOTE UNREACHABLE
##
## Ends in an error in state: 67.
##
## instr -> QUOTE . IDENT COLON LBRACE list(delimited_instr) RBRACE [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## instr -> QUOTE . IDENT COLON LOOP LBRACE list(delimited_instr) RBRACE [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## instr -> QUOTE . IDENT COLON IF instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE
##

Expecting a label name.

parse: LET IDENT EQUAL QUOTE IDENT UNREACHABLE
##
## Ends in an error in state: 68.
##
## instr -> QUOTE IDENT . COLON LBRACE list(delimited_instr) RBRACE [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## instr -> QUOTE IDENT . COLON LOOP LBRACE list(delimited_instr) RBRACE [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## instr -> QUOTE IDENT . COLON IF instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT
##

Expecting a colon ':' after the label name.

parse: LET IDENT EQUAL QUOTE IDENT COLON UNREACHABLE
##
## Ends in an error in state: 69.
##
## instr -> QUOTE IDENT COLON . LBRACE list(delimited_instr) RBRACE [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## instr -> QUOTE IDENT COLON . LOOP LBRACE list(delimited_instr) RBRACE [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## instr -> QUOTE IDENT COLON . IF instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON
##

Expecting a block expression after a label.

parse: LET IDENT EQUAL QUOTE IDENT COLON LOOP UNREACHABLE
##
## Ends in an error in state: 70.
##
## instr -> QUOTE IDENT COLON LOOP . LBRACE list(delimited_instr) RBRACE [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON LOOP
##

Expecting character '{'.

parse: LET IDENT EQUAL QUOTE IDENT COLON LOOP LBRACE UNDERSCORE
##
## Ends in an error in state: 71.
##
## instr -> QUOTE IDENT COLON LOOP LBRACE . list(delimited_instr) RBRACE [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON LOOP LBRACE
##

Expecting an instruction, or the character '}'.

parse: LET IDENT EQUAL LPAREN UNDERSCORE
##
## Ends in an error in state: 78.
##
## plaininstr -> LPAREN . loption(separated_nonempty_list(COMMA,instr)) RPAREN [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expecting an instruction, or a closing parenthesis ')'.

parse: LET IDENT EQUAL LOOP UNREACHABLE
##
## Ends in an error in state: 79.
##
## instr -> LOOP . LBRACE list(delimited_instr) RBRACE [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LOOP
##

Expecting character '{'.

parse: LET IDENT EQUAL LOOP LBRACE UNDERSCORE
##
## Ends in an error in state: 80.
##
## instr -> LOOP LBRACE . list(delimited_instr) RBRACE [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LOOP LBRACE
##

Expecting an instruction, or the character '}'.

parse: LET IDENT EQUAL LET UNREACHABLE
##
## Ends in an error in state: 83.
##
## plaininstr -> LET . IDENT option(__anonymous_9) option(__anonymous_10) [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LET
##

Expecting a local variable name.

parse: LET IDENT EQUAL LET IDENT UNDERSCORE
##
## Ends in an error in state: 84.
##
## plaininstr -> LET IDENT . option(__anonymous_9) option(__anonymous_10) [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LET IDENT
##

Missing semincolon ';'.

parse: LET IDENT EQUAL LET IDENT COLON UNREACHABLE
##
## Ends in an error in state: 85.
##
## option(__anonymous_9) -> COLON . valtype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EQUAL EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## COLON
##

Expecting a value type.

parse: LET IDENT EQUAL LET IDENT COLON IDENT UNDERSCORE
##
## Ends in an error in state: 87.
##
## plaininstr -> LET IDENT option(__anonymous_9) . option(__anonymous_10) [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LET IDENT option(__anonymous_9)
##

Missing semicolon ';'.

parse: LET IDENT EQUAL LET IDENT EQUAL UNDERSCORE
##
## Ends in an error in state: 88.
##
## option(__anonymous_10) -> EQUAL . instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## EQUAL
##

Expecting an instruction, or the character '}'.

parse: LET IDENT EQUAL LBRACE UNDERSCORE
##
## Ends in an error in state: 90.
##
## instr -> LBRACE . list(delimited_instr) RBRACE [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> LBRACE . separated_nonempty_list(COMMA,__anonymous_8) RBRACE [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Expecting an instruction

parse: FN IDENT LPAREN IDENT COLON IDENT COMMA UNREACHABLE
##
## Ends in an error in state: 245.
##
## separated_nonempty_list(COMMA,__anonymous_2) -> simple_pat COLON valtype COMMA . separated_nonempty_list(COMMA,__anonymous_2) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## simple_pat COLON valtype COMMA
##

Expecting a parameter name or an underscore '_'.

parse: FN IDENT LPAREN RPAREN UNREACHABLE
##
## Ends in an error in state: 250.
##
## option(__anonymous_4) -> LPAREN funcparams RPAREN . ARROW resulttype [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN funcparams RPAREN
##

Expecting an arrow '->'.

parse: LET IDENT COLON MUT UNREACHABLE
##
## Ends in an error in state: 60.
##
## option(__anonymous_11) -> COLON boption(MUT) . valtype [ EQUAL ]
##
## The known suffix of the stack is as follows:
## COLON boption(MUT)
##

Expecting a value type.

parse: LET IDENT EQUAL IDENT MINUS UNDERSCORE
##
## Ends in an error in state: 133.
##
## plaininstr -> instr MINUS . instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr MINUS
##

Expecting an instruction.

parse: LET IDENT EQUAL IDENT AS UNREACHABLE
##
## Ends in an error in state: 135.
##
## plaininstr -> instr AS . reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr AS
##

Expecting a refernce type.

parse: LET IDENT EQUAL IDENT LTU UNDERSCORE
##
## Ends in an error in state: 139.
##
## plaininstr -> instr LTU . instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr LTU
##

Expecting an instruction.

parse: LET IDENT EQUAL IDENT GTU UNDERSCORE
##
## Ends in an error in state: 141.
##
## plaininstr -> instr GTU . instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr GTU
##

Expecting an instruction.

parse: LET IDENT EQUAL LPAREN IDENT COMMA UNDERSCORE
##
## Ends in an error in state: 154.
##
## separated_nonempty_list(COMMA,instr) -> instr COMMA . separated_nonempty_list(COMMA,instr) [ RPAREN RBRACKET ]
##
## The known suffix of the stack is as follows:
## instr COMMA
##

Expecting an instruction, or a closing parenthesis '('.

parse: LET IDENT EQUAL IDENT LBRACE IDENT UNREACHABLE
##
## Ends in an error in state: 157.
##
## separated_nonempty_list(COMMA,__anonymous_7) -> IDENT . COLON instr [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_7) -> IDENT . COLON instr COMMA separated_nonempty_list(COMMA,__anonymous_7) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Expecting a colon ':' after the field name of a structure.

parse: LET IDENT EQUAL IDENT LBRACE IDENT COLON UNDERSCORE
##
## Ends in an error in state: 158.
##
## separated_nonempty_list(COMMA,__anonymous_7) -> IDENT COLON . instr [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_7) -> IDENT COLON . instr COMMA separated_nonempty_list(COMMA,__anonymous_7) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

Expecting an instruction.

parse: LET IDENT EQUAL IDENT LBRACE IDENT COLON IDENT COMMA UNREACHABLE
##
## Ends in an error in state: 160.
##
## separated_nonempty_list(COMMA,__anonymous_7) -> IDENT COLON instr COMMA . separated_nonempty_list(COMMA,__anonymous_7) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON instr COMMA
##

Expecting a field definition, or a character '}'.

parse: LET IDENT EQUAL IDENT EQUAL UNDERSCORE
##
## Ends in an error in state: 165.
##
## plaininstr -> IDENT EQUAL . instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IDENT EQUAL
##

Expecting an instruction.

parse: LET IDENT EQUAL LBRACE IDENT COLON UNDERSCORE
##
## Ends in an error in state: 187.
##
## separated_nonempty_list(COMMA,__anonymous_8) -> IDENT COLON . instr [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_8) -> IDENT COLON . instr COMMA separated_nonempty_list(COMMA,__anonymous_8) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

Expecting an instruction.

parse: LET IDENT EQUAL LBRACE IDENT COLON IDENT COMMA UNREACHABLE
##
## Ends in an error in state: 189.
##
## separated_nonempty_list(COMMA,__anonymous_8) -> IDENT COLON instr COMMA . separated_nonempty_list(COMMA,__anonymous_8) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON instr COMMA
##

Expecting a field definition, or a character '}'.

parse: LET IDENT EQUAL LBRACE IDENT COLON IDENT COMMA IDENT UNREACHABLE
##
## Ends in an error in state: 190.
##
## separated_nonempty_list(COMMA,__anonymous_8) -> IDENT . COLON instr [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_8) -> IDENT . COLON instr COMMA separated_nonempty_list(COMMA,__anonymous_8) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Expecting a colon ':'.

parse: LET IDENT EQUAL QUOTE IDENT COLON LBRACE UNDERSCORE
##
## Ends in an error in state: 225.
##
## instr -> QUOTE IDENT COLON LBRACE . list(delimited_instr) RBRACE [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON LBRACE
##

Expecting an instruction, or a character '}'.

parse: FN IDENT COLON IDENT UNREACHABLE
##
## Ends in an error in state: 254.
##
## fundecl -> FN IDENT COLON IDENT . option(__anonymous_4) [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
## valtype -> IDENT . [ ARROW ]
##
## The known suffix of the stack is as follows:
## FN IDENT COLON IDENT
##

Expecting a list of function parameters.

parse: FN IDENT LPAREN UNREACHABLE
##
## Ends in an error in state: 239.
##
## option(__anonymous_4) -> LPAREN . funcparams RPAREN ARROW resulttype [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expecting a list of function parameters.

parse: FN IDENT LPAREN IDENT UNREACHABLE
##
## Ends in an error in state: 242.
##
## separated_nonempty_list(COMMA,__anonymous_2) -> simple_pat . COLON valtype [ RPAREN ]
## separated_nonempty_list(COMMA,__anonymous_2) -> simple_pat . COLON valtype COMMA separated_nonempty_list(COMMA,__anonymous_2) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## simple_pat
##

Expecting a colon ':' followed by a value type.

parse: FN IDENT LPAREN IDENT COLON UNREACHABLE
##
## Ends in an error in state: 243.
##
## separated_nonempty_list(COMMA,__anonymous_2) -> simple_pat COLON . valtype [ RPAREN ]
## separated_nonempty_list(COMMA,__anonymous_2) -> simple_pat COLON . valtype COMMA separated_nonempty_list(COMMA,__anonymous_2) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## simple_pat COLON
##

Expecting a value type.

parse: FN IDENT LPAREN IDENT COLON IDENT UNREACHABLE
##
## Ends in an error in state: 244.
##
## separated_nonempty_list(COMMA,__anonymous_2) -> simple_pat COLON valtype . [ RPAREN ]
## separated_nonempty_list(COMMA,__anonymous_2) -> simple_pat COLON valtype . COMMA separated_nonempty_list(COMMA,__anonymous_2) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## simple_pat COLON valtype
##

Expecting a comma ',' followed by a parameter declaration, or a closing parenthesis ')'.

parse: FN IDENT LPAREN RPAREN ARROW UNREACHABLE
##
## Ends in an error in state: 251.
##
## option(__anonymous_4) -> LPAREN funcparams RPAREN ARROW . resulttype [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN funcparams RPAREN ARROW
##

Expecting a result type.

parse: REC LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 262.
##
## list(modulefield) -> modulefield . list(modulefield) [ EOF ]
##
## The known suffix of the stack is as follows:
## modulefield
##

Expecting a module field.

parse: FN IDENT LPAREN RPAREN ARROW IDENT UNREACHABLE
##
## Ends in an error in state: 265.
##
## func -> fundecl . LBRACE list(delimited_instr) RBRACE [ TYPE REC LET FN EOF ]
## func -> fundecl . QUOTE IDENT COLON LBRACE list(delimited_instr) RBRACE [ TYPE REC LET FN EOF ]
## modulefield -> fundecl . option(SEMI) [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## fundecl
##

Expecting a label, the start of the function body, or another module field.

parse: FN IDENT LPAREN RPAREN ARROW IDENT QUOTE UNREACHABLE
##
## Ends in an error in state: 266.
##
## func -> fundecl QUOTE . IDENT COLON LBRACE list(delimited_instr) RBRACE [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## fundecl QUOTE
##

Expecting a label name.

parse: FN IDENT LPAREN RPAREN ARROW IDENT QUOTE IDENT UNREACHABLE
##
## Ends in an error in state: 267.
##
## func -> fundecl QUOTE IDENT . COLON LBRACE list(delimited_instr) RBRACE [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## fundecl QUOTE IDENT
##

Expecting a colon ':' after the label name.

parse: FN IDENT LPAREN RPAREN ARROW IDENT QUOTE IDENT COLON UNREACHABLE
##
## Ends in an error in state: 268.
##
## func -> fundecl QUOTE IDENT COLON . LBRACE list(delimited_instr) RBRACE [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## fundecl QUOTE IDENT COLON
##

Expecting a block starting with character '{'.

parse: FN IDENT LPAREN RPAREN ARROW IDENT QUOTE IDENT COLON LBRACE UNDERSCORE
##
## Ends in an error in state: 269.
##
## func -> fundecl QUOTE IDENT COLON LBRACE . list(delimited_instr) RBRACE [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## fundecl QUOTE IDENT COLON LBRACE
##

Expecting an instruction, or a character '}'.

parse: FN IDENT LPAREN RPAREN ARROW IDENT LBRACE UNDERSCORE
##
## Ends in an error in state: 272.
##
## func -> fundecl LBRACE . list(delimited_instr) RBRACE [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## fundecl LBRACE
##

Expecting an instruction, or a character '}'.

parse: FN IDENT LBRACE IDENT LPAREN UNDERSCORE
##
## Ends in an error in state: 96.
##
## plaininstr -> IDENT LPAREN . loption(separated_nonempty_list(COMMA,instr)) RPAREN [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IDENT LPAREN
##

Expecting an instruction.


parse: FN IDENT LBRACE IDENT PLUS UNDERSCORE
##
## Ends in an error in state: 123.
##
## plaininstr -> instr PLUS . instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr PLUS
##

Expecting an instruction

parse: FN IDENT LBRACE IDENT DOT UNREACHABLE
##
## Ends in an error in state: 127.
##
## plaininstr -> instr DOT . IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr DOT . IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr DOT
##

Expecting a field name.

parse: FN IDENT LBRACE IDENT DOT IDENT UNDERSCORE
##
## Ends in an error in state: 128.
##
## plaininstr -> instr DOT IDENT . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr DOT IDENT . EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr DOT IDENT
##

Missing semicolon ';'.

parse: FN IDENT LBRACE IDENT DOT IDENT EQUAL UNDERSCORE
##
## Ends in an error in state: 129.
##
## plaininstr -> instr DOT IDENT EQUAL . instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr DOT IDENT EQUAL
##

Expecting an instruction.

parse: FN IDENT LBRACE IDENT LBRACE UNREACHABLE
##
## Ends in an error in state: 156.
##
## plaininstr -> IDENT LBRACE . loption(separated_nonempty_list(COMMA,__anonymous_7)) RBRACE [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IDENT LBRACE
##

Expecting a field definition, or a character '}'.

parse: FN IDENT LBRACE IDENT TYPE
##
## Ends in an error in state: 169.
##
## delimited_instr -> plaininstr . SEMI [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> plaininstr . [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
## plaininstr -> plaininstr . LBRACKET instr RBRACKET [ SEMI PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> plaininstr . LBRACKET instr RBRACKET EQUAL instr [ SEMI PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## plaininstr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production plaininstr -> IDENT
##

Missing semicolon ';'.

parse: REC LBRACE TYPE IDENT EQUAL LBRACE RBRACE REC
##
## Ends in an error in state: 53.
##
## list(typedef) -> typedef . list(typedef) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## typedef
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 47, spurious reduction of production option(SEMI) ->
## In state 49, spurious reduction of production typedef -> TYPE IDENT boption(OPEN) option(__anonymous_1) EQUAL comptype option(SEMI)
##

Expecting keyword 'type', or character '}'.

parse: FN IDENT LBRACE IF UNDERSCORE
##
## Ends in an error in state: 93.
##
## delimited_instr -> IF . instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> IF . instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF
##

Expecting an instruction.

parse: FN IDENT LBRACE IDENT UNREACHABLE
##
## Ends in an error in state: 95.
##
## plaininstr -> IDENT . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> IDENT . EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> IDENT . LPAREN loption(separated_nonempty_list(COMMA,instr)) RPAREN [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> IDENT . LBRACE loption(separated_nonempty_list(COMMA,__anonymous_7)) RBRACE [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Missing semicolon ';'.

parse: FN IDENT LBRACE BR_TABLE UNREACHABLE
##
## Ends in an error in state: 97.
##
## plaininstr -> BR_TABLE . LBRACE nonempty_list(IDENT) RBRACE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_TABLE
##

Expecting a character '{'.

parse: FN IDENT LBRACE BR_TABLE LBRACE UNREACHABLE
##
## Ends in an error in state: 98.
##
## plaininstr -> BR_TABLE LBRACE . nonempty_list(IDENT) RBRACE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_TABLE LBRACE
##

Expecting a sequence of label names followed by character '}'.

parse: FN IDENT LBRACE BR_TABLE LBRACE IDENT UNREACHABLE
##
## Ends in an error in state: 99.
##
## nonempty_list(IDENT) -> IDENT . [ RBRACE ]
## nonempty_list(IDENT) -> IDENT . nonempty_list(IDENT) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Expecting a sequence of label names followed by character '}'.

parse: FN IDENT LBRACE BR_TABLE LBRACE IDENT RBRACE UNDERSCORE
##
## Ends in an error in state: 102.
##
## plaininstr -> BR_TABLE LBRACE nonempty_list(IDENT) RBRACE . instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_TABLE LBRACE nonempty_list(IDENT) RBRACE
##

Missing semicolon ';'

parse: FN IDENT LBRACE BR UNREACHABLE
##
## Ends in an error in state: 115.
##
## plaininstr -> BR . IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> BR . IDENT instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR
##

Expecting a label name.

parse: FN IDENT LBRACE BR IDENT UNDERSCORE
##
## Ends in an error in state: 116.
##
## plaininstr -> BR IDENT . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> BR IDENT . instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR IDENT
##

Missing semicolon ';'.

parse: FN IDENT LBRACE IDENT PIPE UNDERSCORE
##
## Ends in an error in state: 131.
##
## plaininstr -> instr PIPE . instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr PIPE
##

Expecting an instruction.

parse: FN IDENT LBRACE IDENT AMPERSAND UNDERSCORE
##
## Ends in an error in state: 137.
##
## plaininstr -> instr AMPERSAND . instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr AMPERSAND
##

Expecting an instruction.

parse: FN IDENT LBRACE IF INT LBRACE UNDERSCORE
##
## Ends in an error in state: 182.
##
## delimited_instr -> IF instr LBRACE . list(delimited_instr) RBRACE option(__anonymous_6) [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> IF instr LBRACE . list(delimited_instr) RBRACE option(__anonymous_6) [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF instr LBRACE
##

Expecting an instruction, or the character '}'.

parse: FN IDENT LBRACE IF INT LBRACE RBRACE UNDERSCORE
##
## Ends in an error in state: 184.
##
## delimited_instr -> IF instr LBRACE list(delimited_instr) RBRACE . option(__anonymous_6) [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> IF instr LBRACE list(delimited_instr) RBRACE . option(__anonymous_6) [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF instr LBRACE list(delimited_instr) RBRACE
##

Expecting an 'else' branch, another instruction, or a character '}'.

parse: FN IDENT LBRACE IF INT LBRACE RBRACE ELSE UNREACHABLE
##
## Ends in an error in state: 173.
##
## option(__anonymous_6) -> ELSE . LBRACE list(delimited_instr) RBRACE [ UNREACHABLE TYPE STRING SEMI RPAREN RETURN REC RBRACKET RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACKET LBRACE IS INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## ELSE
##

Expecting a character '{'.

parse: FN IDENT LBRACE IF INT LBRACE RBRACE ELSE LBRACE UNDERSCORE
##
## Ends in an error in state: 174.
##
## option(__anonymous_6) -> ELSE LBRACE . list(delimited_instr) RBRACE [ UNREACHABLE TYPE STRING SEMI RPAREN RETURN REC RBRACKET RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACKET LBRACE IS INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## ELSE LBRACE
##

Expecting an instruction or the character '}'.

parse: FN IDENT LBRACE IDENT SEMI UNDERSCORE
##
## Ends in an error in state: 178.
##
## list(delimited_instr) -> delimited_instr . list(delimited_instr) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## delimited_instr
##

Expecting an instruction or the character '}'.

parse: FN IDENT LBRACE LBRACE RBRACE TYPE
##
## Ends in an error in state: 195.
##
## delimited_instr -> LBRACE list(delimited_instr) RBRACE . [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> LBRACE list(delimited_instr) RBRACE . [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LBRACE list(delimited_instr) RBRACE
##

Expecting an instruction or the character '}'.

parse: FN IDENT LBRACE LBRACE IDENT COLON INT UNREACHABLE
##
## Ends in an error in state: 117.
##
## instr -> plaininstr . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> plaininstr . LBRACKET instr RBRACKET [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> plaininstr . LBRACKET instr RBRACKET EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## plaininstr
##

Missing semicolon ';'

parse: FN IDENT LBRACE QUOTE IDENT COLON IF UNDERSCORE
##
## Ends in an error in state: 217.
##
## delimited_instr -> QUOTE IDENT COLON IF . instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> QUOTE IDENT COLON IF . instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON IF
##

Expecting an instruction.

parse: FN IDENT LBRACE QUOTE IDENT COLON IF INT LBRACE UNDERSCORE
##
## Ends in an error in state: 219.
##
## delimited_instr -> QUOTE IDENT COLON IF instr LBRACE . list(delimited_instr) RBRACE option(__anonymous_6) [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> QUOTE IDENT COLON IF instr LBRACE . list(delimited_instr) RBRACE option(__anonymous_6) [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON IF instr LBRACE
##

Expecting an instruction or the character '}'.

parse: FN IDENT LBRACE QUOTE IDENT COLON IF INT LBRACE RBRACE UNDERSCORE
##
## Ends in an error in state: 221.
##
## delimited_instr -> QUOTE IDENT COLON IF instr LBRACE list(delimited_instr) RBRACE . option(__anonymous_6) [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> QUOTE IDENT COLON IF instr LBRACE list(delimited_instr) RBRACE . option(__anonymous_6) [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON IF instr LBRACE list(delimited_instr) RBRACE
##

Expecting an 'else' branch, another instruction, or a character '}'.

parse: FN UNREACHABLE
##
## Ends in an error in state: 237.
##
## fundecl -> FN . IDENT option(__anonymous_4) [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
## fundecl -> FN . IDENT COLON IDENT option(__anonymous_4) [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
## fundecl -> FN . IDENT COLON resulttype ARROW resulttype [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
##
## The known suffix of the stack is as follows:
## FN
##

Expecting a function name.

parse: FN IDENT COLON UNREACHABLE
##
## Ends in an error in state: 253.
##
## fundecl -> FN IDENT COLON . IDENT option(__anonymous_4) [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
## fundecl -> FN IDENT COLON . resulttype ARROW resulttype [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
##
## The known suffix of the stack is as follows:
## FN IDENT COLON
##

Expecting a type name or a function type.

parse: FN IDENT COLON AMPERSAND IDENT UNREACHABLE
##
## Ends in an error in state: 256.
##
## fundecl -> FN IDENT COLON resulttype . ARROW resulttype [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
##
## The known suffix of the stack is as follows:
## FN IDENT COLON resulttype
##

Expecting an arrow '->'.

parse: FN IDENT COLON IDENT ARROW UNREACHABLE
##
## Ends in an error in state: 257.
##
## fundecl -> FN IDENT COLON resulttype ARROW . resulttype [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
##
## The known suffix of the stack is as follows:
## FN IDENT COLON resulttype ARROW
##

Expectint a result type.

parse: FN IDENT LBRACE RETURN UNDERSCORE
##
## Ends in an error in state: 66.
##
## plaininstr -> RETURN . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> RETURN . instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## RETURN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE QUOTE UNREACHABLE
##
## Ends in an error in state: 72.
##
## delimited_instr -> QUOTE . IDENT COLON LBRACE list(delimited_instr) RBRACE [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## delimited_instr -> QUOTE . IDENT COLON LOOP LBRACE list(delimited_instr) RBRACE [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## delimited_instr -> QUOTE . IDENT COLON IF instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> QUOTE . IDENT COLON LBRACE list(delimited_instr) RBRACE [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
## instr -> QUOTE . IDENT COLON LOOP LBRACE list(delimited_instr) RBRACE [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
## instr -> QUOTE . IDENT COLON IF instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE QUOTE IDENT UNREACHABLE
##
## Ends in an error in state: 73.
##
## delimited_instr -> QUOTE IDENT . COLON LBRACE list(delimited_instr) RBRACE [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## delimited_instr -> QUOTE IDENT . COLON LOOP LBRACE list(delimited_instr) RBRACE [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## delimited_instr -> QUOTE IDENT . COLON IF instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> QUOTE IDENT . COLON LBRACE list(delimited_instr) RBRACE [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
## instr -> QUOTE IDENT . COLON LOOP LBRACE list(delimited_instr) RBRACE [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
## instr -> QUOTE IDENT . COLON IF instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE QUOTE IDENT COLON UNREACHABLE
##
## Ends in an error in state: 74.
##
## delimited_instr -> QUOTE IDENT COLON . LBRACE list(delimited_instr) RBRACE [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## delimited_instr -> QUOTE IDENT COLON . LOOP LBRACE list(delimited_instr) RBRACE [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## delimited_instr -> QUOTE IDENT COLON . IF instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> QUOTE IDENT COLON . LBRACE list(delimited_instr) RBRACE [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
## instr -> QUOTE IDENT COLON . LOOP LBRACE list(delimited_instr) RBRACE [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
## instr -> QUOTE IDENT COLON . IF instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE QUOTE IDENT COLON LOOP UNREACHABLE
##
## Ends in an error in state: 75.
##
## delimited_instr -> QUOTE IDENT COLON LOOP . LBRACE list(delimited_instr) RBRACE [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> QUOTE IDENT COLON LOOP . LBRACE list(delimited_instr) RBRACE [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE QUOTE IDENT COLON LOOP LBRACE UNDERSCORE
##
## Ends in an error in state: 76.
##
## delimited_instr -> QUOTE IDENT COLON LOOP LBRACE . list(delimited_instr) RBRACE [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> QUOTE IDENT COLON LOOP LBRACE . list(delimited_instr) RBRACE [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON LOOP LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE LOOP UNREACHABLE
##
## Ends in an error in state: 81.
##
## delimited_instr -> LOOP . LBRACE list(delimited_instr) RBRACE [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> LOOP . LBRACE list(delimited_instr) RBRACE [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LOOP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE LOOP LBRACE UNDERSCORE
##
## Ends in an error in state: 82.
##
## delimited_instr -> LOOP LBRACE . list(delimited_instr) RBRACE [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> LOOP LBRACE . list(delimited_instr) RBRACE [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LOOP LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE LBRACKET UNDERSCORE
##
## Ends in an error in state: 89.
##
## plaininstr -> LBRACKET . loption(separated_nonempty_list(COMMA,instr)) RBRACKET [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> LBRACKET . instr SEMI instr RBRACKET [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE LBRACE UNDERSCORE
##
## Ends in an error in state: 91.
##
## delimited_instr -> LBRACE . list(delimited_instr) RBRACE [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> LBRACE . list(delimited_instr) RBRACE [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
## plaininstr -> LBRACE . separated_nonempty_list(COMMA,__anonymous_8) RBRACE [ SEMI PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LET IDENT EQUAL IF UNDERSCORE
##
## Ends in an error in state: 94.
##
## instr -> IF . instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE BR_ON_NULL UNREACHABLE
##
## Ends in an error in state: 103.
##
## plaininstr -> BR_ON_NULL . IDENT instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_ON_NULL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE BR_ON_NULL IDENT UNDERSCORE
##
## Ends in an error in state: 104.
##
## plaininstr -> BR_ON_NULL IDENT . instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_ON_NULL IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE BR_ON_NON_NULL UNREACHABLE
##
## Ends in an error in state: 105.
##
## plaininstr -> BR_ON_NON_NULL . IDENT instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_ON_NON_NULL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE BR_ON_NON_NULL IDENT UNDERSCORE
##
## Ends in an error in state: 106.
##
## plaininstr -> BR_ON_NON_NULL IDENT . instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_ON_NON_NULL IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE BR_ON_CAST_FAIL UNREACHABLE
##
## Ends in an error in state: 107.
##
## plaininstr -> BR_ON_CAST_FAIL . IDENT reftype instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_ON_CAST_FAIL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE BR_ON_CAST_FAIL IDENT UNREACHABLE
##
## Ends in an error in state: 108.
##
## plaininstr -> BR_ON_CAST_FAIL IDENT . reftype instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_ON_CAST_FAIL IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE BR_ON_CAST_FAIL IDENT AMPERSAND IDENT UNDERSCORE
##
## Ends in an error in state: 109.
##
## plaininstr -> BR_ON_CAST_FAIL IDENT reftype . instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_ON_CAST_FAIL IDENT reftype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE BR_ON_CAST UNREACHABLE
##
## Ends in an error in state: 110.
##
## plaininstr -> BR_ON_CAST . IDENT reftype instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_ON_CAST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE BR_ON_CAST IDENT UNREACHABLE
##
## Ends in an error in state: 111.
##
## plaininstr -> BR_ON_CAST IDENT . reftype instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_ON_CAST IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE BR_ON_CAST IDENT AMPERSAND IDENT UNDERSCORE
##
## Ends in an error in state: 112.
##
## plaininstr -> BR_ON_CAST IDENT reftype . instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_ON_CAST IDENT reftype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE BR_IF UNREACHABLE
##
## Ends in an error in state: 113.
##
## plaininstr -> BR_IF . IDENT instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE BR_IF IDENT UNDERSCORE
##
## Ends in an error in state: 114.
##
## plaininstr -> BR_IF IDENT . instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_IF IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE IDENT LBRACKET UNDERSCORE
##
## Ends in an error in state: 118.
##
## plaininstr -> plaininstr LBRACKET . instr RBRACKET [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> plaininstr LBRACKET . instr RBRACKET EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## plaininstr LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE IDENT LBRACKET IDENT TYPE
##
## Ends in an error in state: 119.
##
## plaininstr -> instr . AS reftype [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> plaininstr LBRACKET instr . RBRACKET [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> plaininstr LBRACKET instr . RBRACKET EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## plaininstr LBRACKET instr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production plaininstr -> IDENT
## In state 117, spurious reduction of production instr -> plaininstr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE IDENT LBRACKET IDENT RBRACKET UNREACHABLE
##
## Ends in an error in state: 120.
##
## plaininstr -> plaininstr LBRACKET instr RBRACKET . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> plaininstr LBRACKET instr RBRACKET . EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## plaininstr LBRACKET instr RBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE IDENT LBRACKET IDENT RBRACKET EQUAL UNDERSCORE
##
## Ends in an error in state: 121.
##
## plaininstr -> plaininstr LBRACKET instr RBRACKET EQUAL . instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## plaininstr LBRACKET instr RBRACKET EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE IDENT LBRACKET IDENT RBRACKET EQUAL LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 122.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> plaininstr LBRACKET instr RBRACKET EQUAL instr . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## plaininstr LBRACKET instr RBRACKET EQUAL instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE IDENT PLUS LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 124.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr PLUS instr . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr PLUS instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE IDENT IS UNREACHABLE
##
## Ends in an error in state: 125.
##
## plaininstr -> instr IS . reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr IS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE IDENT DOT IDENT EQUAL LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 130.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr DOT IDENT EQUAL instr . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr DOT IDENT EQUAL instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE IDENT PIPE LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 132.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr PIPE instr . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr PIPE instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE IDENT MINUS LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 134.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr MINUS instr . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr MINUS instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE IDENT AMPERSAND LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 138.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr AMPERSAND instr . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr AMPERSAND instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE IDENT LTU IDENT LTU
##
## Ends in an error in state: 140.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr LTU instr . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr LTU instr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production plaininstr -> IDENT
## In state 117, spurious reduction of production instr -> plaininstr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE IDENT GTU IDENT LTU
##
## Ends in an error in state: 142.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr GTU instr . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr GTU instr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production plaininstr -> IDENT
## In state 117, spurious reduction of production instr -> plaininstr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE BR IDENT LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 143.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> BR IDENT instr . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR IDENT instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE BR_IF IDENT LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 144.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> BR_IF IDENT instr . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_IF IDENT instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE BR_ON_CAST IDENT AMPERSAND IDENT LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 145.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> BR_ON_CAST IDENT reftype instr . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_ON_CAST IDENT reftype instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE BR_ON_CAST_FAIL IDENT AMPERSAND IDENT LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 146.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> BR_ON_CAST_FAIL IDENT reftype instr . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_ON_CAST_FAIL IDENT reftype instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE BR_ON_NON_NULL IDENT LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 147.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> BR_ON_NON_NULL IDENT instr . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_ON_NON_NULL IDENT instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE BR_ON_NULL IDENT LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 148.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> BR_ON_NULL IDENT instr . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_ON_NULL IDENT instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE BR_TABLE LBRACE IDENT RBRACE LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 149.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> BR_TABLE LBRACE nonempty_list(IDENT) RBRACE instr . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_TABLE LBRACE nonempty_list(IDENT) RBRACE instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE IDENT LPAREN IDENT RBRACKET
##
## Ends in an error in state: 151.
##
## plaininstr -> IDENT LPAREN loption(separated_nonempty_list(COMMA,instr)) . RPAREN [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IDENT LPAREN loption(separated_nonempty_list(COMMA,instr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production plaininstr -> IDENT
## In state 117, spurious reduction of production instr -> plaininstr
## In state 153, spurious reduction of production separated_nonempty_list(COMMA,instr) -> instr
## In state 150, spurious reduction of production loption(separated_nonempty_list(COMMA,instr)) -> separated_nonempty_list(COMMA,instr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE LPAREN IDENT TYPE
##
## Ends in an error in state: 153.
##
## plaininstr -> instr . AS reftype [ RPAREN RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ RPAREN RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ RPAREN RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ RPAREN RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ RPAREN RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ RPAREN RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ RPAREN RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ RPAREN RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ RPAREN RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ RPAREN RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## separated_nonempty_list(COMMA,instr) -> instr . [ RPAREN RBRACKET ]
## separated_nonempty_list(COMMA,instr) -> instr . COMMA separated_nonempty_list(COMMA,instr) [ RPAREN RBRACKET ]
##
## The known suffix of the stack is as follows:
## instr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production plaininstr -> IDENT
## In state 117, spurious reduction of production instr -> plaininstr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE IDENT LBRACE IDENT COLON IDENT TYPE
##
## Ends in an error in state: 159.
##
## plaininstr -> instr . AS reftype [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## separated_nonempty_list(COMMA,__anonymous_7) -> IDENT COLON instr . [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_7) -> IDENT COLON instr . COMMA separated_nonempty_list(COMMA,__anonymous_7) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON instr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production plaininstr -> IDENT
## In state 117, spurious reduction of production instr -> plaininstr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE IDENT EQUAL LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 166.
##
## plaininstr -> IDENT EQUAL instr . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IDENT EQUAL instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LET IDENT EQUAL IF IDENT TYPE
##
## Ends in an error in state: 167.
##
## instr -> IF instr . LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AS reftype [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF instr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production plaininstr -> IDENT
## In state 117, spurious reduction of production instr -> plaininstr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LET IDENT EQUAL IF INT LBRACE UNDERSCORE
##
## Ends in an error in state: 168.
##
## instr -> IF instr LBRACE . list(delimited_instr) RBRACE option(__anonymous_6) [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF instr LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LET IDENT EQUAL IF INT LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 172.
##
## instr -> IF instr LBRACE list(delimited_instr) RBRACE . option(__anonymous_6) [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF instr LBRACE list(delimited_instr) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE IF IDENT TYPE
##
## Ends in an error in state: 181.
##
## delimited_instr -> IF instr . LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> IF instr . LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . AS reftype [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF instr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production plaininstr -> IDENT
## In state 117, spurious reduction of production instr -> plaininstr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE IF INT LBRACE RBRACE ELSE LBRACE RBRACE UNDERSCORE
##
## Ends in an error in state: 185.
##
## delimited_instr -> IF instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) . [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> IF instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) . [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE LBRACE IDENT UNREACHABLE
##
## Ends in an error in state: 186.
##
## plaininstr -> IDENT . [ SEMI PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> IDENT . EQUAL instr [ SEMI PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> IDENT . LPAREN loption(separated_nonempty_list(COMMA,instr)) RPAREN [ SEMI PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> IDENT . LBRACE loption(separated_nonempty_list(COMMA,__anonymous_7)) RBRACE [ SEMI PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## separated_nonempty_list(COMMA,__anonymous_8) -> IDENT . COLON instr [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_8) -> IDENT . COLON instr COMMA separated_nonempty_list(COMMA,__anonymous_8) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE LBRACE IDENT COLON IDENT TYPE
##
## Ends in an error in state: 188.
##
## plaininstr -> instr . AS reftype [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ RBRACE PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## separated_nonempty_list(COMMA,__anonymous_8) -> IDENT COLON instr . [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_8) -> IDENT COLON instr . COMMA separated_nonempty_list(COMMA,__anonymous_8) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON instr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production plaininstr -> IDENT
## In state 117, spurious reduction of production instr -> plaininstr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE LBRACKET IDENT COMMA IDENT RPAREN
##
## Ends in an error in state: 198.
##
## plaininstr -> LBRACKET loption(separated_nonempty_list(COMMA,instr)) . RBRACKET [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LBRACKET loption(separated_nonempty_list(COMMA,instr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production plaininstr -> IDENT
## In state 117, spurious reduction of production instr -> plaininstr
## In state 153, spurious reduction of production separated_nonempty_list(COMMA,instr) -> instr
## In state 155, spurious reduction of production separated_nonempty_list(COMMA,instr) -> instr COMMA separated_nonempty_list(COMMA,instr)
## In state 150, spurious reduction of production loption(separated_nonempty_list(COMMA,instr)) -> separated_nonempty_list(COMMA,instr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE LBRACKET IDENT TYPE
##
## Ends in an error in state: 200.
##
## plaininstr -> instr . AS reftype [ SEMI RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ SEMI RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ SEMI RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ SEMI RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ SEMI RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ SEMI RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ SEMI RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ SEMI RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ SEMI RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ SEMI RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> LBRACKET instr . SEMI instr RBRACKET [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## separated_nonempty_list(COMMA,instr) -> instr . [ RBRACKET ]
## separated_nonempty_list(COMMA,instr) -> instr . COMMA separated_nonempty_list(COMMA,instr) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## LBRACKET instr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production plaininstr -> IDENT
## In state 117, spurious reduction of production instr -> plaininstr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE LBRACKET IDENT SEMI UNDERSCORE
##
## Ends in an error in state: 201.
##
## plaininstr -> LBRACKET instr SEMI . instr RBRACKET [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LBRACKET instr SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE LBRACKET IDENT SEMI IDENT TYPE
##
## Ends in an error in state: 202.
##
## plaininstr -> instr . AS reftype [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ RBRACKET PLUS PIPE MINUS LTU LBRACKET IS GTU DOT AS AMPERSAND ]
## plaininstr -> LBRACKET instr SEMI instr . RBRACKET [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LBRACKET instr SEMI instr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production plaininstr -> IDENT
## In state 117, spurious reduction of production instr -> plaininstr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE LET IDENT EQUAL LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 204.
##
## option(__anonymous_10) -> EQUAL instr . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## EQUAL instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE LOOP LBRACE RBRACE UNDERSCORE
##
## Ends in an error in state: 207.
##
## delimited_instr -> LOOP LBRACE list(delimited_instr) RBRACE . [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> LOOP LBRACE list(delimited_instr) RBRACE . [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LOOP LBRACE list(delimited_instr) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE LPAREN IDENT RBRACKET
##
## Ends in an error in state: 210.
##
## plaininstr -> LPAREN loption(separated_nonempty_list(COMMA,instr)) . RPAREN [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LPAREN loption(separated_nonempty_list(COMMA,instr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production plaininstr -> IDENT
## In state 117, spurious reduction of production instr -> plaininstr
## In state 153, spurious reduction of production separated_nonempty_list(COMMA,instr) -> instr
## In state 150, spurious reduction of production loption(separated_nonempty_list(COMMA,instr)) -> separated_nonempty_list(COMMA,instr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE QUOTE IDENT COLON LOOP LBRACE RBRACE UNDERSCORE
##
## Ends in an error in state: 213.
##
## delimited_instr -> QUOTE IDENT COLON LOOP LBRACE list(delimited_instr) RBRACE . [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> QUOTE IDENT COLON LOOP LBRACE list(delimited_instr) RBRACE . [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON LOOP LBRACE list(delimited_instr) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE QUOTE IDENT COLON LBRACE UNDERSCORE
##
## Ends in an error in state: 214.
##
## delimited_instr -> QUOTE IDENT COLON LBRACE . list(delimited_instr) RBRACE [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> QUOTE IDENT COLON LBRACE . list(delimited_instr) RBRACE [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE QUOTE IDENT COLON LBRACE RBRACE UNDERSCORE
##
## Ends in an error in state: 216.
##
## delimited_instr -> QUOTE IDENT COLON LBRACE list(delimited_instr) RBRACE . [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> QUOTE IDENT COLON LBRACE list(delimited_instr) RBRACE . [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON LBRACE list(delimited_instr) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE QUOTE IDENT COLON IF IDENT TYPE
##
## Ends in an error in state: 218.
##
## delimited_instr -> QUOTE IDENT COLON IF instr . LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> QUOTE IDENT COLON IF instr . LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . AS reftype [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON IF instr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production plaininstr -> IDENT
## In state 117, spurious reduction of production instr -> plaininstr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE QUOTE IDENT COLON IF INT LBRACE RBRACE ELSE LBRACE RBRACE UNDERSCORE
##
## Ends in an error in state: 222.
##
## delimited_instr -> QUOTE IDENT COLON IF instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) . [ UNREACHABLE STRING RETURN RBRACE QUOTE NOP LPAREN LOOP LET LBRACKET LBRACE INT IF IDENT BR_TABLE BR_ON_NULL BR_ON_NON_NULL BR_ON_CAST_FAIL BR_ON_CAST BR_IF BR ]
## instr -> QUOTE IDENT COLON IF instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) . [ PLUS PIPE MINUS LTU IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON IF instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LET IDENT EQUAL QUOTE IDENT COLON IF UNDERSCORE
##
## Ends in an error in state: 228.
##
## instr -> QUOTE IDENT COLON IF . instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LET IDENT EQUAL QUOTE IDENT COLON IF IDENT TYPE
##
## Ends in an error in state: 229.
##
## instr -> QUOTE IDENT COLON IF instr . LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AS reftype [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ PLUS PIPE MINUS LTU LBRACKET LBRACE IS GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON IF instr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production plaininstr -> IDENT
## In state 117, spurious reduction of production instr -> plaininstr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LET IDENT EQUAL QUOTE IDENT COLON IF INT LBRACE UNDERSCORE
##
## Ends in an error in state: 230.
##
## instr -> QUOTE IDENT COLON IF instr LBRACE . list(delimited_instr) RBRACE option(__anonymous_6) [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON IF instr LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LET IDENT EQUAL QUOTE IDENT COLON IF INT LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 232.
##
## instr -> QUOTE IDENT COLON IF instr LBRACE list(delimited_instr) RBRACE . option(__anonymous_6) [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON IF instr LBRACE list(delimited_instr) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT LBRACE RETURN LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 234.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> RETURN instr . [ TYPE SEMI RPAREN REC RBRACKET RBRACE PLUS PIPE MINUS LTU LET LBRACKET LBRACE IS GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## RETURN instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: LET IDENT EQUAL IDENT RPAREN
##
## Ends in an error in state: 235.
##
## global -> LET IDENT option(__anonymous_11) EQUAL instr . option(SEMI) [ TYPE REC LET FN EOF ]
## plaininstr -> instr . AS reftype [ TYPE SEMI REC PLUS PIPE MINUS LTU LET LBRACKET IS GTU FN EOF DOT AS AMPERSAND ]
## plaininstr -> instr . IS reftype [ TYPE SEMI REC PLUS PIPE MINUS LTU LET LBRACKET IS GTU FN EOF DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI REC PLUS PIPE MINUS LTU LET LBRACKET IS GTU FN EOF DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI REC PLUS PIPE MINUS LTU LET LBRACKET IS GTU FN EOF DOT AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI REC PLUS PIPE MINUS LTU LET LBRACKET IS GTU FN EOF DOT AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI REC PLUS PIPE MINUS LTU LET LBRACKET IS GTU FN EOF DOT AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI REC PLUS PIPE MINUS LTU LET LBRACKET IS GTU FN EOF DOT AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI REC PLUS PIPE MINUS LTU LET LBRACKET IS GTU FN EOF DOT AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI REC PLUS PIPE MINUS LTU LET LBRACKET IS GTU FN EOF DOT AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI REC PLUS PIPE MINUS LTU LET LBRACKET IS GTU FN EOF DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LET IDENT option(__anonymous_11) EQUAL instr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 95, spurious reduction of production plaininstr -> IDENT
## In state 117, spurious reduction of production instr -> plaininstr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

parse: FN IDENT UNREACHABLE
##
## Ends in an error in state: 238.
##
## fundecl -> FN IDENT . option(__anonymous_4) [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
## fundecl -> FN IDENT . COLON IDENT option(__anonymous_4) [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
## fundecl -> FN IDENT . COLON resulttype ARROW resulttype [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
##
## The known suffix of the stack is as follows:
## FN IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>
