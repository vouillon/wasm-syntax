module_: UNREACHABLE
##
## Ends in an error in state: 0.
##
## module_' -> . module_ [ # ]
##
## The known suffix of the stack is as follows:
##
##

Expecting a module field.

module_: TYPE UNREACHABLE
##
## Ends in an error in state: 1.
##
## typedef -> TYPE . IDENT boption(OPEN) option(__anonymous_1) EQUAL comptype option(SEMI) [ TYPE REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## TYPE
##

Expecting the name of the type.

module_: TYPE IDENT UNREACHABLE
##
## Ends in an error in state: 2.
##
## typedef -> TYPE IDENT . boption(OPEN) option(__anonymous_1) EQUAL comptype option(SEMI) [ TYPE REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT
##

Expecting an 'open' flag, a colon ':' followed by a supertype, or an equal sign '=' followed by a type definition.

module_: TYPE IDENT OPEN UNREACHABLE
##
## Ends in an error in state: 4.
##
## typedef -> TYPE IDENT boption(OPEN) . option(__anonymous_1) EQUAL comptype option(SEMI) [ TYPE REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT boption(OPEN)
##

Expecting a colon ':' followed by a supertype, or an equal sign '=' followed by a type definition.

module_: TYPE IDENT COLON UNREACHABLE
##
## Ends in an error in state: 5.
##
## option(__anonymous_1) -> COLON . IDENT [ EQUAL ]
##
## The known suffix of the stack is as follows:
## COLON
##

Expecting the name of the supertype.

module_: TYPE IDENT COLON IDENT UNREACHABLE
##
## Ends in an error in state: 7.
##
## typedef -> TYPE IDENT boption(OPEN) option(__anonymous_1) . EQUAL comptype option(SEMI) [ TYPE REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT boption(OPEN) option(__anonymous_1)
##

Expecting an equal sign '=' followed by the type definition.

module_: TYPE IDENT EQUAL UNREACHABLE
##
## Ends in an error in state: 8.
##
## typedef -> TYPE IDENT boption(OPEN) option(__anonymous_1) EQUAL . comptype option(SEMI) [ TYPE REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT boption(OPEN) option(__anonymous_1) EQUAL
##

Expecting a type definition.

module_: TYPE IDENT EQUAL LBRACKET UNREACHABLE
##
## Ends in an error in state: 9.
##
## arraytype -> LBRACKET . fieldtype RBRACKET [ TYPE SEMI REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Expecting a field type.

module_: TYPE IDENT EQUAL LBRACKET MUT UNREACHABLE
##
## Ends in an error in state: 13.
##
## fieldtype -> boption(MUT) . storagetype [ RBRACKET RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## boption(MUT)
##

Expecting a storage type.

module_: LET IDENT COLON AMPERSAND UNREACHABLE
##
## Ends in an error in state: 15.
##
## reftype -> AMPERSAND . boption(QUESTIONMARK) heaptype [ TYPE SEMI RPAREN REC RBRACKET RBRACE QUOTE PLUS PIPE MINUS LTU LET LBRACE GTU FN EQUAL EOF DOT COMMA AS ARROW AMPERSAND ]
##
## The known suffix of the stack is as follows:
## AMPERSAND
##

Expecting a character '?', or a heap type.

module_: LET IDENT COLON AMPERSAND QUESTIONMARK UNREACHABLE
##
## Ends in an error in state: 17.
##
## reftype -> AMPERSAND boption(QUESTIONMARK) . heaptype [ TYPE SEMI RPAREN REC RBRACKET RBRACE QUOTE PLUS PIPE MINUS LTU LET LBRACE GTU FN EQUAL EOF DOT COMMA AS ARROW AMPERSAND ]
##
## The known suffix of the stack is as follows:
## AMPERSAND boption(QUESTIONMARK)
##

Expecting a character '?', a heap type.

module_: TYPE IDENT EQUAL LBRACKET IDENT UNREACHABLE
##
## Ends in an error in state: 11.
##
## arraytype -> LBRACKET fieldtype . RBRACKET [ TYPE SEMI REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## LBRACKET fieldtype
##

Expecting a character ']'.

module_: TYPE IDENT EQUAL LBRACE UNREACHABLE
##
## Ends in an error in state: 22.
##
## structtype -> LBRACE . loption(separated_nonempty_list(COMMA,__anonymous_0)) RBRACE [ TYPE SEMI REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Expecting a field name, or character '}'.

module_: TYPE IDENT EQUAL LBRACE IDENT UNREACHABLE
##
## Ends in an error in state: 23.
##
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT . COLON fieldtype [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT . COLON fieldtype COMMA separated_nonempty_list(COMMA,__anonymous_0) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Expecting a colon ':'.

module_: TYPE IDENT EQUAL LBRACE IDENT COLON UNREACHABLE
##
## Ends in an error in state: 24.
##
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT COLON . fieldtype [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT COLON . fieldtype COMMA separated_nonempty_list(COMMA,__anonymous_0) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

Expecting a field type.

module_: TYPE IDENT EQUAL LBRACE IDENT COLON IDENT UNREACHABLE
##
## Ends in an error in state: 25.
##
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT COLON fieldtype . [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT COLON fieldtype . COMMA separated_nonempty_list(COMMA,__anonymous_0) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON fieldtype
##

Expecting a comma ',', or a character '}'.

module_: TYPE IDENT EQUAL LBRACE IDENT COLON IDENT COMMA UNREACHABLE
##
## Ends in an error in state: 26.
##
## separated_nonempty_list(COMMA,__anonymous_0) -> IDENT COLON fieldtype COMMA . separated_nonempty_list(COMMA,__anonymous_0) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON fieldtype COMMA
##

Expecting a field name.

module_: TYPE IDENT EQUAL FN UNREACHABLE
##
## Ends in an error in state: 31.
##
## functype -> FN . resulttype ARROW resulttype [ TYPE SEMI REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## FN
##

Expecting a result type.

module_: TYPE IDENT EQUAL FN LPAREN UNREACHABLE
##
## Ends in an error in state: 32.
##
## resulttype -> LPAREN . RPAREN [ TYPE SEMI REC RBRACE QUOTE LET LBRACE FN EOF ARROW ]
## resulttype -> LPAREN . separated_nonempty_list(COMMA,valtype) RPAREN [ TYPE SEMI REC RBRACE QUOTE LET LBRACE FN EOF ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expecting a value type, or a closing parenthesis ')'.

module_: TYPE IDENT EQUAL FN LPAREN IDENT UNREACHABLE
##
## Ends in an error in state: 35.
##
## separated_nonempty_list(COMMA,valtype) -> valtype . [ RPAREN ]
## separated_nonempty_list(COMMA,valtype) -> valtype . COMMA separated_nonempty_list(COMMA,valtype) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## valtype
##

Expecting a comma ',', or a closing parenthesis ')'.

module_: TYPE IDENT EQUAL FN LPAREN IDENT COMMA UNREACHABLE
##
## Ends in an error in state: 36.
##
## separated_nonempty_list(COMMA,valtype) -> valtype COMMA . separated_nonempty_list(COMMA,valtype) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## valtype COMMA
##

Expecting a value type.

module_: TYPE IDENT EQUAL FN IDENT UNREACHABLE
##
## Ends in an error in state: 42.
##
## functype -> FN resulttype . ARROW resulttype [ TYPE SEMI REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## FN resulttype
##

Expecting an arrow '->'.

module_: TYPE IDENT EQUAL FN IDENT ARROW UNREACHABLE
##
## Ends in an error in state: 43.
##
## functype -> FN resulttype ARROW . resulttype [ TYPE SEMI REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## FN resulttype ARROW
##

Expecting a result type.

module_: REC UNREACHABLE
##
## Ends in an error in state: 51.
##
## rectype -> REC . LBRACE list(typedef) RBRACE [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## REC
##

Expecting a character '{'.

module_: REC LBRACE UNREACHABLE
##
## Ends in an error in state: 52.
##
## rectype -> REC LBRACE . list(typedef) RBRACE [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## REC LBRACE
##

Expecting keyword 'type', or character '}'.

module_: REC LBRACE TYPE IDENT EQUAL LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 47.
##
## typedef -> TYPE IDENT boption(OPEN) option(__anonymous_1) EQUAL comptype . option(SEMI) [ TYPE REC RBRACE LET FN EOF ]
##
## The known suffix of the stack is as follows:
## TYPE IDENT boption(OPEN) option(__anonymous_1) EQUAL comptype
##

Expecting keyword 'type', or character '}'.

module_: LET UNREACHABLE
##
## Ends in an error in state: 57.
##
## global -> LET . IDENT option(__anonymous_11) EQUAL instr option(SEMI) [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## LET
##

Expecting the name of the global variable.

module_: LET IDENT UNREACHABLE
##
## Ends in an error in state: 58.
##
## global -> LET IDENT . option(__anonymous_11) EQUAL instr option(SEMI) [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT
##

Expecting a colon ':' followed by the type of the global, or an equal sign '=' followed by its definition.

module_: LET IDENT COLON UNREACHABLE
##
## Ends in an error in state: 59.
##
## option(__anonymous_11) -> COLON . boption(MUT) valtype [ EQUAL ]
##
## The known suffix of the stack is as follows:
## COLON
##

Expecting a global type.

module_: LET IDENT COLON IDENT UNREACHABLE
##
## Ends in an error in state: 62.
##
## global -> LET IDENT option(__anonymous_11) . EQUAL instr option(SEMI) [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT option(__anonymous_11)
##

Expecting an equal sign '=' followed by an instruction.

module_: LET IDENT EQUAL UNDERSCORE
##
## Ends in an error in state: 63.
##
## global -> LET IDENT option(__anonymous_11) EQUAL . instr option(SEMI) [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## LET IDENT option(__anonymous_11) EQUAL
##

Expecting an instruction.

module_: LET IDENT EQUAL QUOTE UNREACHABLE
##
## Ends in an error in state: 66.
##
## blockinstr -> QUOTE . IDENT COLON LBRACE list(delimited_instr) RBRACE [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
## blockinstr -> QUOTE . IDENT COLON LOOP LBRACE list(delimited_instr) RBRACE [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
## blockinstr -> QUOTE . IDENT COLON IF instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE
##

Expecting a label name.

module_: LET IDENT EQUAL QUOTE IDENT UNREACHABLE
##
## Ends in an error in state: 67.
##
## blockinstr -> QUOTE IDENT . COLON LBRACE list(delimited_instr) RBRACE [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
## blockinstr -> QUOTE IDENT . COLON LOOP LBRACE list(delimited_instr) RBRACE [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
## blockinstr -> QUOTE IDENT . COLON IF instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT
##

Expecting a colon ':' after the label name.

module_: LET IDENT EQUAL QUOTE IDENT COLON UNREACHABLE
##
## Ends in an error in state: 68.
##
## blockinstr -> QUOTE IDENT COLON . LBRACE list(delimited_instr) RBRACE [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
## blockinstr -> QUOTE IDENT COLON . LOOP LBRACE list(delimited_instr) RBRACE [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
## blockinstr -> QUOTE IDENT COLON . IF instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON
##

Expecting a block expression after a label.

module_: LET IDENT EQUAL QUOTE IDENT COLON LOOP UNREACHABLE
##
## Ends in an error in state: 69.
##
## blockinstr -> QUOTE IDENT COLON LOOP . LBRACE list(delimited_instr) RBRACE [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON LOOP
##

Expecting character '{'.

module_: LET IDENT EQUAL QUOTE IDENT COLON LOOP LBRACE UNDERSCORE
##
## Ends in an error in state: 70.
##
## blockinstr -> QUOTE IDENT COLON LOOP LBRACE . list(delimited_instr) RBRACE [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON LOOP LBRACE
##

Expecting an instruction, or the character '}'.

module_: LET IDENT EQUAL LPAREN UNDERSCORE
##
## Ends in an error in state: 72.
##
## plaininstr -> LPAREN . loption(separated_nonempty_list(COMMA,instr)) RPAREN [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expecting an instruction, or a closing parenthesis ')'.

module_: LET IDENT EQUAL LOOP UNREACHABLE
##
## Ends in an error in state: 73.
##
## blockinstr -> LOOP . LBRACE list(delimited_instr) RBRACE [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LOOP
##

Expecting character '{'.

module_: LET IDENT EQUAL LOOP LBRACE UNDERSCORE
##
## Ends in an error in state: 74.
##
## blockinstr -> LOOP LBRACE . list(delimited_instr) RBRACE [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LOOP LBRACE
##

Expecting an instruction, or the character '}'.

module_: LET IDENT EQUAL LET UNREACHABLE
##
## Ends in an error in state: 75.
##
## plaininstr -> LET . IDENT option(__anonymous_9) option(__anonymous_10) [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LET
##

Expecting a local variable name.

module_: LET IDENT EQUAL LET IDENT UNDERSCORE
##
## Ends in an error in state: 76.
##
## plaininstr -> LET IDENT . option(__anonymous_9) option(__anonymous_10) [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LET IDENT
##

Missing semincolon ';'.

module_: LET IDENT EQUAL LET IDENT COLON UNREACHABLE
##
## Ends in an error in state: 77.
##
## option(__anonymous_9) -> COLON . valtype [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EQUAL EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## COLON
##

Expecting a value type.

module_: LET IDENT EQUAL LET IDENT COLON IDENT UNDERSCORE
##
## Ends in an error in state: 79.
##
## plaininstr -> LET IDENT option(__anonymous_9) . option(__anonymous_10) [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LET IDENT option(__anonymous_9)
##

Missing semicolon ';'.

module_: LET IDENT EQUAL LET IDENT EQUAL UNDERSCORE
##
## Ends in an error in state: 80.
##
## option(__anonymous_10) -> EQUAL . instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## EQUAL
##

Expecting an instruction, or the character '}'.

module_: LET IDENT EQUAL LBRACE UNDERSCORE
##
## Ends in an error in state: 81.
##
## blockinstr -> LBRACE . list(delimited_instr) RBRACE [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
## plaininstr -> LBRACE . separated_nonempty_list(COMMA,__anonymous_8) RBRACE [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Expecting an instruction

module_: FN IDENT LPAREN IDENT COLON IDENT COMMA UNREACHABLE
##
## Ends in an error in state: 181.
##
## separated_nonempty_list(COMMA,__anonymous_2) -> simple_pat COLON valtype COMMA . separated_nonempty_list(COMMA,__anonymous_2) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## simple_pat COLON valtype COMMA
##

Expecting a parameter name or an underscore '_'.

module_: FN IDENT LPAREN RPAREN UNREACHABLE
##
## Ends in an error in state: 186.
##
## option(__anonymous_4) -> LPAREN funcparams RPAREN . ARROW resulttype [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN funcparams RPAREN
##

Expecting an arrow '->'.

module_: LET IDENT COLON MUT UNREACHABLE
##
## Ends in an error in state: 60.
##
## option(__anonymous_11) -> COLON boption(MUT) . valtype [ EQUAL ]
##
## The known suffix of the stack is as follows:
## COLON boption(MUT)
##

Expecting a value type.

module_: LET IDENT EQUAL IDENT MINUS UNDERSCORE
##
## Ends in an error in state: 106.
##
## plaininstr -> instr MINUS . instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr MINUS
##

Expecting an instruction.

module_: LET IDENT EQUAL IDENT AS UNREACHABLE
##
## Ends in an error in state: 108.
##
## plaininstr -> instr AS . reftype [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr AS
##

Expecting a refernce type.

module_: LET IDENT EQUAL IDENT LTU UNDERSCORE
##
## Ends in an error in state: 112.
##
## plaininstr -> instr LTU . instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr LTU
##

Expecting an instruction.

module_: LET IDENT EQUAL IDENT GTU UNDERSCORE
##
## Ends in an error in state: 114.
##
## plaininstr -> instr GTU . instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr GTU
##

Expecting an instruction.

module_: LET IDENT EQUAL LPAREN IDENT COMMA UNDERSCORE
##
## Ends in an error in state: 116.
##
## separated_nonempty_list(COMMA,instr) -> instr COMMA . separated_nonempty_list(COMMA,instr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## instr COMMA
##

Expecting an instruction, or a closing parenthesis '('.

module_: LET IDENT EQUAL IDENT LBRACE IDENT UNREACHABLE
##
## Ends in an error in state: 119.
##
## separated_nonempty_list(COMMA,__anonymous_7) -> IDENT . COLON instr [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_7) -> IDENT . COLON instr COMMA separated_nonempty_list(COMMA,__anonymous_7) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Expecting a colon ':' after the field name of a structure.

module_: LET IDENT EQUAL IDENT LBRACE IDENT COLON UNDERSCORE
##
## Ends in an error in state: 120.
##
## separated_nonempty_list(COMMA,__anonymous_7) -> IDENT COLON . instr [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_7) -> IDENT COLON . instr COMMA separated_nonempty_list(COMMA,__anonymous_7) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

Expecting an instruction.

module_: LET IDENT EQUAL IDENT LBRACE IDENT COLON IDENT COMMA UNREACHABLE
##
## Ends in an error in state: 122.
##
## separated_nonempty_list(COMMA,__anonymous_7) -> IDENT COLON instr COMMA . separated_nonempty_list(COMMA,__anonymous_7) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON instr COMMA
##

Expecting a field definition, or a character '}'.

module_: LET IDENT EQUAL IDENT EQUAL UNDERSCORE
##
## Ends in an error in state: 127.
##
## plaininstr -> IDENT EQUAL . instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IDENT EQUAL
##

Expecting an instruction.

module_: LET IDENT EQUAL LBRACE IDENT COLON UNDERSCORE
##
## Ends in an error in state: 145.
##
## separated_nonempty_list(COMMA,__anonymous_8) -> IDENT COLON . instr [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_8) -> IDENT COLON . instr COMMA separated_nonempty_list(COMMA,__anonymous_8) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON
##

Expecting an instruction.

module_: LET IDENT EQUAL LBRACE IDENT COLON IDENT COMMA UNREACHABLE
##
## Ends in an error in state: 147.
##
## separated_nonempty_list(COMMA,__anonymous_8) -> IDENT COLON instr COMMA . separated_nonempty_list(COMMA,__anonymous_8) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON instr COMMA
##

Expecting a field definition, or a character '}'.

module_: LET IDENT EQUAL LBRACE IDENT COLON IDENT COMMA IDENT UNREACHABLE
##
## Ends in an error in state: 148.
##
## separated_nonempty_list(COMMA,__anonymous_8) -> IDENT . COLON instr [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_8) -> IDENT . COLON instr COMMA separated_nonempty_list(COMMA,__anonymous_8) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Expecting a colon ':'.

module_: LET IDENT EQUAL QUOTE IDENT COLON LBRACE UNDERSCORE
##
## Ends in an error in state: 162.
##
## blockinstr -> QUOTE IDENT COLON LBRACE . list(delimited_instr) RBRACE [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON LBRACE
##

Expecting an instruction, or a character '}'.

module_: FN IDENT COLON IDENT UNREACHABLE
##
## Ends in an error in state: 190.
##
## fundecl -> FN IDENT COLON IDENT . option(__anonymous_4) [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
## valtype -> IDENT . [ ARROW ]
##
## The known suffix of the stack is as follows:
## FN IDENT COLON IDENT
##

Expecting a list of function parameters.

module_: FN IDENT LPAREN UNREACHABLE
##
## Ends in an error in state: 175.
##
## option(__anonymous_4) -> LPAREN . funcparams RPAREN ARROW resulttype [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expecting a list of function parameters.

module_: FN IDENT LPAREN IDENT UNREACHABLE
##
## Ends in an error in state: 178.
##
## separated_nonempty_list(COMMA,__anonymous_2) -> simple_pat . COLON valtype [ RPAREN ]
## separated_nonempty_list(COMMA,__anonymous_2) -> simple_pat . COLON valtype COMMA separated_nonempty_list(COMMA,__anonymous_2) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## simple_pat
##

Expecting a colon ':' followed by a value type.

module_: FN IDENT LPAREN IDENT COLON UNREACHABLE
##
## Ends in an error in state: 179.
##
## separated_nonempty_list(COMMA,__anonymous_2) -> simple_pat COLON . valtype [ RPAREN ]
## separated_nonempty_list(COMMA,__anonymous_2) -> simple_pat COLON . valtype COMMA separated_nonempty_list(COMMA,__anonymous_2) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## simple_pat COLON
##

Expecting a value type.

module_: FN IDENT LPAREN IDENT COLON IDENT UNREACHABLE
##
## Ends in an error in state: 180.
##
## separated_nonempty_list(COMMA,__anonymous_2) -> simple_pat COLON valtype . [ RPAREN ]
## separated_nonempty_list(COMMA,__anonymous_2) -> simple_pat COLON valtype . COMMA separated_nonempty_list(COMMA,__anonymous_2) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## simple_pat COLON valtype
##

Expecting a comma ',' followed by a parameter declaration, or a closing parenthesis ')'.

module_: FN IDENT LPAREN RPAREN ARROW UNREACHABLE
##
## Ends in an error in state: 187.
##
## option(__anonymous_4) -> LPAREN funcparams RPAREN ARROW . resulttype [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN funcparams RPAREN ARROW
##

Expecting a result type.

module_: REC LBRACE RBRACE UNREACHABLE
##
## Ends in an error in state: 198.
##
## list(modulefield) -> modulefield . list(modulefield) [ EOF ]
##
## The known suffix of the stack is as follows:
## modulefield
##

Expecting a module field.

module_: FN IDENT LPAREN RPAREN ARROW IDENT UNREACHABLE
##
## Ends in an error in state: 201.
##
## func -> fundecl . LBRACE list(delimited_instr) RBRACE [ TYPE REC LET FN EOF ]
## func -> fundecl . QUOTE IDENT COLON LBRACE list(delimited_instr) RBRACE [ TYPE REC LET FN EOF ]
## modulefield -> fundecl . option(SEMI) [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## fundecl
##

Expecting a label, the start of the function body, or another module field.

module_: FN IDENT LPAREN RPAREN ARROW IDENT QUOTE UNREACHABLE
##
## Ends in an error in state: 202.
##
## func -> fundecl QUOTE . IDENT COLON LBRACE list(delimited_instr) RBRACE [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## fundecl QUOTE
##

Expecting a label name.

module_: FN IDENT LPAREN RPAREN ARROW IDENT QUOTE IDENT UNREACHABLE
##
## Ends in an error in state: 203.
##
## func -> fundecl QUOTE IDENT . COLON LBRACE list(delimited_instr) RBRACE [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## fundecl QUOTE IDENT
##

Expecting a colon ':' after the label name.

module_: FN IDENT LPAREN RPAREN ARROW IDENT QUOTE IDENT COLON UNREACHABLE
##
## Ends in an error in state: 204.
##
## func -> fundecl QUOTE IDENT COLON . LBRACE list(delimited_instr) RBRACE [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## fundecl QUOTE IDENT COLON
##

Expecting a block starting with character '{'.

module_: FN IDENT LPAREN RPAREN ARROW IDENT QUOTE IDENT COLON LBRACE UNDERSCORE
##
## Ends in an error in state: 205.
##
## func -> fundecl QUOTE IDENT COLON LBRACE . list(delimited_instr) RBRACE [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## fundecl QUOTE IDENT COLON LBRACE
##

Expecting an instruction, or a character '}'.

module_: FN IDENT LPAREN RPAREN ARROW IDENT LBRACE UNDERSCORE
##
## Ends in an error in state: 208.
##
## func -> fundecl LBRACE . list(delimited_instr) RBRACE [ TYPE REC LET FN EOF ]
##
## The known suffix of the stack is as follows:
## fundecl LBRACE
##

Expecting an instruction, or a character '}'.

module_: FN IDENT LBRACE IDENT LPAREN UNDERSCORE
##
## Ends in an error in state: 85.
##
## plaininstr -> IDENT LPAREN . loption(separated_nonempty_list(COMMA,instr)) RPAREN [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IDENT LPAREN
##

Expecting an instruction.


module_: FN IDENT LBRACE IDENT PLUS UNDERSCORE
##
## Ends in an error in state: 98.
##
## plaininstr -> instr PLUS . instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr PLUS
##

Expecting an instruction

module_: FN IDENT LBRACE IDENT DOT UNREACHABLE
##
## Ends in an error in state: 100.
##
## plaininstr -> instr DOT . IDENT [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr DOT . IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr DOT
##

Expecting a field name.

module_: FN IDENT LBRACE IDENT DOT IDENT UNDERSCORE
##
## Ends in an error in state: 101.
##
## plaininstr -> instr DOT IDENT . [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr DOT IDENT . EQUAL instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr DOT IDENT
##

Missing semicolon ';'.

module_: FN IDENT LBRACE IDENT DOT IDENT EQUAL UNDERSCORE
##
## Ends in an error in state: 102.
##
## plaininstr -> instr DOT IDENT EQUAL . instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr DOT IDENT EQUAL
##

Expecting an instruction.

module_: FN IDENT LBRACE IDENT LBRACE UNREACHABLE
##
## Ends in an error in state: 118.
##
## plaininstr -> IDENT LBRACE . loption(separated_nonempty_list(COMMA,__anonymous_7)) RBRACE [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IDENT LBRACE
##

Expecting a field definition, or a character '}'.

module_: FN IDENT LBRACE IDENT TYPE
##
## Ends in an error in state: 131.
##
## delimited_instr -> plaininstr . SEMI [ UNREACHABLE STRING RBRACE QUOTE NOP LPAREN LOOP LET LBRACE INT IF IDENT BR_TABLE BR ]
## instr -> plaininstr . [ PLUS PIPE MINUS LTU GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## plaininstr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 84, spurious reduction of production plaininstr -> IDENT
##

Missing semicolon ';'.

module_: REC LBRACE TYPE IDENT EQUAL LBRACE RBRACE REC
##
## Ends in an error in state: 53.
##
## list(typedef) -> typedef . list(typedef) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## typedef
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 47, spurious reduction of production option(SEMI) ->
## In state 49, spurious reduction of production typedef -> TYPE IDENT boption(OPEN) option(__anonymous_1) EQUAL comptype option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE IF UNDERSCORE
##
## Ends in an error in state: 83.
##
## blockinstr -> IF . instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE IDENT UNREACHABLE
##
## Ends in an error in state: 84.
##
## plaininstr -> IDENT . [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> IDENT . EQUAL instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> IDENT . LPAREN loption(separated_nonempty_list(COMMA,instr)) RPAREN [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> IDENT . LBRACE loption(separated_nonempty_list(COMMA,__anonymous_7)) RBRACE [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE BR_TABLE UNREACHABLE
##
## Ends in an error in state: 86.
##
## plaininstr -> BR_TABLE . IDENT [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> BR_TABLE . IDENT instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_TABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE BR_TABLE IDENT UNDERSCORE
##
## Ends in an error in state: 87.
##
## plaininstr -> BR_TABLE IDENT . [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> BR_TABLE IDENT . instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR_TABLE IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE BR UNREACHABLE
##
## Ends in an error in state: 88.
##
## plaininstr -> BR . IDENT [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> BR . IDENT instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE BR IDENT UNDERSCORE
##
## Ends in an error in state: 89.
##
## plaininstr -> BR IDENT . [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> BR IDENT . instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## BR IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE LPAREN INT UNREACHABLE
##
## Ends in an error in state: 97.
##
## plaininstr -> instr . AS reftype [ RPAREN PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ RPAREN PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ RPAREN PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ RPAREN PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ RPAREN PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ RPAREN PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ RPAREN PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ RPAREN PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ RPAREN PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## separated_nonempty_list(COMMA,instr) -> instr . [ RPAREN ]
## separated_nonempty_list(COMMA,instr) -> instr . COMMA separated_nonempty_list(COMMA,instr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE IDENT PLUS INT UNDERSCORE
##
## Ends in an error in state: 99.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr PLUS instr . [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr PLUS instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE IDENT DOT IDENT EQUAL INT UNDERSCORE
##
## Ends in an error in state: 103.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr DOT IDENT EQUAL instr . [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr DOT IDENT EQUAL instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE IDENT PIPE UNDERSCORE
##
## Ends in an error in state: 104.
##
## plaininstr -> instr PIPE . instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr PIPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE IDENT PIPE INT UNDERSCORE
##
## Ends in an error in state: 105.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr PIPE instr . [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr PIPE instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE IDENT MINUS INT UNDERSCORE
##
## Ends in an error in state: 107.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr MINUS instr . [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr MINUS instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE IDENT AMPERSAND UNDERSCORE
##
## Ends in an error in state: 110.
##
## plaininstr -> instr AMPERSAND . instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr AMPERSAND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE IDENT AMPERSAND INT UNDERSCORE
##
## Ends in an error in state: 111.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr AMPERSAND instr . [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr AMPERSAND instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE IDENT LTU INT UNDERSCORE
##
## Ends in an error in state: 113.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr LTU instr . [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr LTU instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE IDENT GTU INT UNDERSCORE
##
## Ends in an error in state: 115.
##
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr GTU instr . [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## instr GTU instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE IDENT LBRACE IDENT COLON INT UNREACHABLE
##
## Ends in an error in state: 121.
##
## plaininstr -> instr . AS reftype [ RBRACE PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ RBRACE PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ RBRACE PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ RBRACE PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ RBRACE PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ RBRACE PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ RBRACE PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ RBRACE PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ RBRACE PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## separated_nonempty_list(COMMA,__anonymous_7) -> IDENT COLON instr . [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_7) -> IDENT COLON instr . COMMA separated_nonempty_list(COMMA,__anonymous_7) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE IDENT EQUAL INT UNDERSCORE
##
## Ends in an error in state: 128.
##
## plaininstr -> IDENT EQUAL instr . [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IDENT EQUAL instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE IF INT UNREACHABLE
##
## Ends in an error in state: 129.
##
## blockinstr -> IF instr . LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
## plaininstr -> instr . AS reftype [ PLUS PIPE MINUS LTU LBRACE GTU DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ PLUS PIPE MINUS LTU LBRACE GTU DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ PLUS PIPE MINUS LTU LBRACE GTU DOT AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ PLUS PIPE MINUS LTU LBRACE GTU DOT AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ PLUS PIPE MINUS LTU LBRACE GTU DOT AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ PLUS PIPE MINUS LTU LBRACE GTU DOT AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ PLUS PIPE MINUS LTU LBRACE GTU DOT AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ PLUS PIPE MINUS LTU LBRACE GTU DOT AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ PLUS PIPE MINUS LTU LBRACE GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE IF INT LBRACE UNDERSCORE
##
## Ends in an error in state: 130.
##
## blockinstr -> IF instr LBRACE . list(delimited_instr) RBRACE option(__anonymous_6) [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF instr LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE IF INT LBRACE RBRACE UNDERSCORE
##
## Ends in an error in state: 134.
##
## blockinstr -> IF instr LBRACE list(delimited_instr) RBRACE . option(__anonymous_6) [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF instr LBRACE list(delimited_instr) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE IF INT LBRACE RBRACE ELSE UNREACHABLE
##
## Ends in an error in state: 135.
##
## option(__anonymous_6) -> ELSE . LBRACE list(delimited_instr) RBRACE [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE IF INT LBRACE RBRACE ELSE LBRACE UNDERSCORE
##
## Ends in an error in state: 136.
##
## option(__anonymous_6) -> ELSE LBRACE . list(delimited_instr) RBRACE [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## ELSE LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE IDENT SEMI UNDERSCORE
##
## Ends in an error in state: 140.
##
## list(delimited_instr) -> delimited_instr . list(delimited_instr) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## delimited_instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE LBRACE RBRACE TYPE
##
## Ends in an error in state: 142.
##
## delimited_instr -> blockinstr . [ UNREACHABLE STRING RBRACE QUOTE NOP LPAREN LOOP LET LBRACE INT IF IDENT BR_TABLE BR ]
## instr -> blockinstr . [ PLUS PIPE MINUS LTU GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## blockinstr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE LBRACE IDENT UNREACHABLE
##
## Ends in an error in state: 144.
##
## plaininstr -> IDENT . [ SEMI PLUS PIPE MINUS LTU GTU DOT AS AMPERSAND ]
## plaininstr -> IDENT . EQUAL instr [ SEMI PLUS PIPE MINUS LTU GTU DOT AS AMPERSAND ]
## plaininstr -> IDENT . LPAREN loption(separated_nonempty_list(COMMA,instr)) RPAREN [ SEMI PLUS PIPE MINUS LTU GTU DOT AS AMPERSAND ]
## plaininstr -> IDENT . LBRACE loption(separated_nonempty_list(COMMA,__anonymous_7)) RBRACE [ SEMI PLUS PIPE MINUS LTU GTU DOT AS AMPERSAND ]
## separated_nonempty_list(COMMA,__anonymous_8) -> IDENT . COLON instr [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_8) -> IDENT . COLON instr COMMA separated_nonempty_list(COMMA,__anonymous_8) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE LBRACE IDENT COLON INT UNREACHABLE
##
## Ends in an error in state: 146.
##
## plaininstr -> instr . AS reftype [ RBRACE PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ RBRACE PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ RBRACE PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ RBRACE PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ RBRACE PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ RBRACE PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ RBRACE PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ RBRACE PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ RBRACE PLUS PIPE MINUS LTU GTU DOT COMMA AS AMPERSAND ]
## separated_nonempty_list(COMMA,__anonymous_8) -> IDENT COLON instr . [ RBRACE ]
## separated_nonempty_list(COMMA,__anonymous_8) -> IDENT COLON instr . COMMA separated_nonempty_list(COMMA,__anonymous_8) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT COLON instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE LET IDENT EQUAL INT UNDERSCORE
##
## Ends in an error in state: 154.
##
## option(__anonymous_10) -> EQUAL instr . [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AS reftype [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI RPAREN REC RBRACE PLUS PIPE MINUS LTU LET LBRACE GTU FN EOF DOT COMMA AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## EQUAL instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE QUOTE IDENT COLON IF UNDERSCORE
##
## Ends in an error in state: 165.
##
## blockinstr -> QUOTE IDENT COLON IF . instr LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE QUOTE IDENT COLON IF INT UNREACHABLE
##
## Ends in an error in state: 166.
##
## blockinstr -> QUOTE IDENT COLON IF instr . LBRACE list(delimited_instr) RBRACE option(__anonymous_6) [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
## plaininstr -> instr . AS reftype [ PLUS PIPE MINUS LTU LBRACE GTU DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ PLUS PIPE MINUS LTU LBRACE GTU DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ PLUS PIPE MINUS LTU LBRACE GTU DOT AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ PLUS PIPE MINUS LTU LBRACE GTU DOT AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ PLUS PIPE MINUS LTU LBRACE GTU DOT AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ PLUS PIPE MINUS LTU LBRACE GTU DOT AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ PLUS PIPE MINUS LTU LBRACE GTU DOT AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ PLUS PIPE MINUS LTU LBRACE GTU DOT AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ PLUS PIPE MINUS LTU LBRACE GTU DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON IF instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE QUOTE IDENT COLON IF INT LBRACE UNDERSCORE
##
## Ends in an error in state: 167.
##
## blockinstr -> QUOTE IDENT COLON IF instr LBRACE . list(delimited_instr) RBRACE option(__anonymous_6) [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON IF instr LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT LBRACE QUOTE IDENT COLON IF INT LBRACE RBRACE UNDERSCORE
##
## Ends in an error in state: 169.
##
## blockinstr -> QUOTE IDENT COLON IF instr LBRACE list(delimited_instr) RBRACE . option(__anonymous_6) [ UNREACHABLE TYPE STRING SEMI RPAREN REC RBRACE QUOTE PLUS PIPE NOP MINUS LTU LPAREN LOOP LET LBRACE INT IF IDENT GTU FN EOF DOT COMMA BR_TABLE BR AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## QUOTE IDENT COLON IF instr LBRACE list(delimited_instr) RBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LET IDENT EQUAL INT UNREACHABLE
##
## Ends in an error in state: 171.
##
## global -> LET IDENT option(__anonymous_11) EQUAL instr . option(SEMI) [ TYPE REC LET FN EOF ]
## plaininstr -> instr . AS reftype [ TYPE SEMI REC PLUS PIPE MINUS LTU LET GTU FN EOF DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT [ TYPE SEMI REC PLUS PIPE MINUS LTU LET GTU FN EOF DOT AS AMPERSAND ]
## plaininstr -> instr . DOT IDENT EQUAL instr [ TYPE SEMI REC PLUS PIPE MINUS LTU LET GTU FN EOF DOT AS AMPERSAND ]
## plaininstr -> instr . PLUS instr [ TYPE SEMI REC PLUS PIPE MINUS LTU LET GTU FN EOF DOT AS AMPERSAND ]
## plaininstr -> instr . MINUS instr [ TYPE SEMI REC PLUS PIPE MINUS LTU LET GTU FN EOF DOT AS AMPERSAND ]
## plaininstr -> instr . LTU instr [ TYPE SEMI REC PLUS PIPE MINUS LTU LET GTU FN EOF DOT AS AMPERSAND ]
## plaininstr -> instr . GTU instr [ TYPE SEMI REC PLUS PIPE MINUS LTU LET GTU FN EOF DOT AS AMPERSAND ]
## plaininstr -> instr . AMPERSAND instr [ TYPE SEMI REC PLUS PIPE MINUS LTU LET GTU FN EOF DOT AS AMPERSAND ]
## plaininstr -> instr . PIPE instr [ TYPE SEMI REC PLUS PIPE MINUS LTU LET GTU FN EOF DOT AS AMPERSAND ]
##
## The known suffix of the stack is as follows:
## LET IDENT option(__anonymous_11) EQUAL instr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN UNREACHABLE
##
## Ends in an error in state: 173.
##
## fundecl -> FN . IDENT option(__anonymous_4) [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
## fundecl -> FN . IDENT COLON IDENT option(__anonymous_4) [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
## fundecl -> FN . IDENT COLON resulttype ARROW resulttype [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
##
## The known suffix of the stack is as follows:
## FN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT UNREACHABLE
##
## Ends in an error in state: 174.
##
## fundecl -> FN IDENT . option(__anonymous_4) [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
## fundecl -> FN IDENT . COLON IDENT option(__anonymous_4) [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
## fundecl -> FN IDENT . COLON resulttype ARROW resulttype [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
##
## The known suffix of the stack is as follows:
## FN IDENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT COLON UNREACHABLE
##
## Ends in an error in state: 189.
##
## fundecl -> FN IDENT COLON . IDENT option(__anonymous_4) [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
## fundecl -> FN IDENT COLON . resulttype ARROW resulttype [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
##
## The known suffix of the stack is as follows:
## FN IDENT COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT COLON AMPERSAND IDENT UNREACHABLE
##
## Ends in an error in state: 192.
##
## fundecl -> FN IDENT COLON resulttype . ARROW resulttype [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
##
## The known suffix of the stack is as follows:
## FN IDENT COLON resulttype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: FN IDENT COLON IDENT ARROW UNREACHABLE
##
## Ends in an error in state: 193.
##
## fundecl -> FN IDENT COLON resulttype ARROW . resulttype [ TYPE SEMI REC QUOTE LET LBRACE FN EOF ]
##
## The known suffix of the stack is as follows:
## FN IDENT COLON resulttype ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>
