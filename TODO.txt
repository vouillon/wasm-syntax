- how to deal with functions returning multiple values?
  (in generated binary code)
  ==> maybe just have a destructuring let?
  note that (x, y, z) is just a sequence of instructions
    let (x,y) = (u, v) ==> u v (locat.set $y) (local.set $x)
- syntax errors
- typing
- output wasm code
- parse wasm code and output to this format
- type for 8bit/16bit values + explicit type expansion
- validation of wasm code
- switch translated to br_table?
    match (foo) {
    1 => ..,
    2 => ..,
    _ => ..
    }
- same for try/catch
    try (body) { a => br x, ..., _ => br z}
  (not sure this works well)

====

allow to put block labels at the end?
collect constraints on untyped variables while parsing

simplify parser (type use)


Folding:
- stack with placeholders for value that do not correspond
  to an expression (multiple returns / block inputs)
- peek an instruction; compute its arity and peek arguments from the stack
  if no return value, emit instruction; otherwise;
  push on the stack with count of return values
- at end of block; write stack contents

Keep strings as strings
