module_: LPAREN VALTYPE
##
## Ends in an error in state: 1.
##
## func -> LPAREN . FUNC option(ID) typeuse(locals(list(instr))) RPAREN [ LPAREN EOF ]
## global -> LPAREN . GLOBAL option(ID) globaldesc RPAREN [ LPAREN EOF ]
## import -> LPAREN . IMPORT name name importdesc RPAREN [ LPAREN EOF ]
## module_ -> LPAREN . MODULE option(ID) list(modulefield) RPAREN EOF [ # ]
## rectype -> LPAREN . REC list(typedef) RPAREN [ LPAREN EOF ]
## typedef -> LPAREN . TYPE option(ID) subtype RPAREN [ LPAREN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expecting a module field.

module_: LPAREN TYPE LPAREN VALTYPE
##
## Ends in an error in state: 5.
##
## comptype -> LPAREN . ARRAY fieldtype RPAREN [ RPAREN ]
## comptype -> LPAREN . STRUCT list(field) RPAREN [ RPAREN ]
## functype -> LPAREN . FUNC params_and_results(RPAREN) [ RPAREN ]
## subtype -> LPAREN . SUB boption(FINAL) option(idx) comptype RPAREN [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expecting a subtype or directly a composite type declaration.

module_: LPAREN TYPE LPAREN SUB LPAREN VALTYPE
##
## Ends in an error in state: 13.
##
## comptype -> LPAREN . ARRAY fieldtype RPAREN [ RPAREN ]
## comptype -> LPAREN . STRUCT list(field) RPAREN [ RPAREN ]
## functype -> LPAREN . FUNC params_and_results(RPAREN) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expecting a composite type declaration.

module_: LPAREN TYPE LPAREN STRUCT VALTYPE
##
## Ends in an error in state: 14.
##
## comptype -> LPAREN STRUCT . list(field) RPAREN [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN STRUCT
##

Expecting a sequence of field declarations.

module_: LPAREN TYPE LPAREN STRUCT LPAREN VALTYPE
##
## Ends in an error in state: 15.
##
## field -> LPAREN . FIELD ID fieldtype RPAREN [ RPAREN LPAREN ]
## field -> LPAREN . FIELD list(fieldtype) RPAREN [ RPAREN LPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expecting 'field'.

module_: LPAREN TYPE LPAREN STRUCT LPAREN FIELD TYPE
##
## Ends in an error in state: 16.
##
## field -> LPAREN FIELD . ID fieldtype RPAREN [ RPAREN LPAREN ]
## field -> LPAREN FIELD . list(fieldtype) RPAREN [ RPAREN LPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN FIELD
##

Expecting a field identifier or a field type.

module_: LPAREN TYPE LPAREN ARRAY LPAREN MUT TYPE
##
## Ends in an error in state: 36.
##
## fieldtype -> LPAREN MUT . storagetype RPAREN [ VALTYPE RPAREN PACKEDTYPE LPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN MUT
##

Expecting a storage type.

module_: LPAREN GLOBAL LPAREN MUT LPAREN VALTYPE
##
## Ends in an error in state: 37.
##
## reftype -> LPAREN . REF boption(NULL) heaptype RPAREN [ VALTYPE RPAREN LPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expecting 'ref'.

module_: LPAREN TYPE LPAREN ARRAY LPAREN MUT VALTYPE VALTYPE
##
## Ends in an error in state: 39.
##
## fieldtype -> LPAREN MUT storagetype . RPAREN [ VALTYPE RPAREN PACKEDTYPE LPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN MUT storagetype
##

Expecting a closing parenthesis.

module_: LPAREN TYPE LPAREN STRUCT LPAREN FIELD ID TYPE
##
## Ends in an error in state: 42.
##
## field -> LPAREN FIELD ID . fieldtype RPAREN [ RPAREN LPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN FIELD ID
##

Expecting a field type.

module_: LPAREN TYPE LPAREN STRUCT LPAREN FIELD ID VALTYPE VALTYPE
##
## Ends in an error in state: 44.
##
## field -> LPAREN FIELD ID fieldtype . RPAREN [ RPAREN LPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN FIELD ID fieldtype
##

Expecting a closing parenthesis.

module_: LPAREN TYPE LPAREN STRUCT LPAREN FIELD VALTYPE TYPE
##
## Ends in an error in state: 48.
##
## list(fieldtype) -> fieldtype . list(fieldtype) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## fieldtype
##

Expecting a list of field types followed by a closing parenthesis.

module_: LPAREN TYPE LPAREN STRUCT LPAREN FIELD RPAREN VALTYPE
##
## Ends in an error in state: 52.
##
## list(field) -> field . list(field) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## field
##

Expecting a list of fields followed by closing parenthesis.

module_: LPAREN TYPE LPAREN FUNC LPAREN VALTYPE
##
## Ends in an error in state: 56.
##
## params(results(RPAREN)) -> LPAREN . PARAM ID valtype RPAREN params(results(RPAREN)) [ RPAREN ]
## params(results(RPAREN)) -> LPAREN . PARAM list(valtype) RPAREN params(results(RPAREN)) [ RPAREN ]
## results(RPAREN) -> LPAREN . RESULT list(valtype) RPAREN results(RPAREN) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expecting 'param' or 'result'.

module_: LPAREN TYPE LPAREN FUNC LPAREN RESULT TYPE
##
## Ends in an error in state: 57.
##
## results(RPAREN) -> LPAREN RESULT . list(valtype) RPAREN results(RPAREN) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN RESULT
##

Expecting a list of value types followed by a closing parenthesis.

module_: LPAREN TYPE LPAREN FUNC LPAREN PARAM VALTYPE TYPE
##
## Ends in an error in state: 58.
##
## list(valtype) -> valtype . list(valtype) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## valtype
##

Expecting a list of value types followed by a closing parenthesis.

module_: LPAREN TYPE LPAREN FUNC LPAREN PARAM TYPE
##
## Ends in an error in state: 64.
##
## params(results(RPAREN)) -> LPAREN PARAM . ID valtype RPAREN params(results(RPAREN)) [ RPAREN ]
## params(results(RPAREN)) -> LPAREN PARAM . list(valtype) RPAREN params(results(RPAREN)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN PARAM
##

Expecting a parameter identifier or a value type.

module_: LPAREN TYPE LPAREN FUNC LPAREN PARAM ID TYPE
##
## Ends in an error in state: 65.
##
## params(results(RPAREN)) -> LPAREN PARAM ID . valtype RPAREN params(results(RPAREN)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN PARAM ID
##

Expecting a value type.

module_: LPAREN TYPE LPAREN FUNC LPAREN PARAM ID VALTYPE VALTYPE
##
## Ends in an error in state: 66.
##
## params(results(RPAREN)) -> LPAREN PARAM ID valtype . RPAREN params(results(RPAREN)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN PARAM ID valtype
##

Expecting a closing parenthesis.

module_: LPAREN TYPE LPAREN FUNC LPAREN RESULT RPAREN VALTYPE
##
## Ends in an error in state: 61.
##
## results(RPAREN) -> LPAREN RESULT list(valtype) RPAREN . results(RPAREN) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN RESULT list(valtype) RPAREN
##

Expecting a list of result types followed by a closing parenthesis.

module_: LPAREN TYPE LPAREN FUNC LPAREN RESULT RPAREN LPAREN VALTYPE
##
## Ends in an error in state: 62.
##
## results(RPAREN) -> LPAREN . RESULT list(valtype) RPAREN results(RPAREN) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expecting 'result'.

module_: LPAREN TYPE LPAREN ARRAY TYPE
##
## Ends in an error in state: 75.
##
## comptype -> LPAREN ARRAY . fieldtype RPAREN [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN ARRAY
##

Expecing a field type.

module_: LPAREN TYPE LPAREN ARRAY VALTYPE VALTYPE
##
## Ends in an error in state: 76.
##
## comptype -> LPAREN ARRAY fieldtype . RPAREN [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN ARRAY fieldtype
##

Expecting a closing parenthesis.

module_: LPAREN TYPE LPAREN SUB LPAREN FUNC RPAREN VALTYPE
##
## Ends in an error in state: 79.
##
## subtype -> LPAREN SUB boption(FINAL) option(idx) comptype . RPAREN [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN SUB boption(FINAL) option(idx) comptype
##

Expecting a closing parenthesis.

module_: LPAREN TYPE LPAREN FUNC RPAREN VALTYPE
##
## Ends in an error in state: 82.
##
## typedef -> LPAREN TYPE option(ID) subtype . RPAREN [ RPAREN LPAREN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN TYPE option(ID) subtype
##

Expecting a closing parenthesis.

module_: LPAREN REC VALTYPE
##
## Ends in an error in state: 85.
##
## rectype -> LPAREN REC . list(typedef) RPAREN [ RPAREN LPAREN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN REC
##

Expecting a list of type definitions.

module_: LPAREN REC LPAREN VALTYPE
##
## Ends in an error in state: 86.
##
## typedef -> LPAREN . TYPE option(ID) subtype RPAREN [ RPAREN LPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expecting 'type'.

module_: LPAREN REC LPAREN TYPE LPAREN FUNC RPAREN RPAREN VALTYPE
##
## Ends in an error in state: 87.
##
## list(typedef) -> typedef . list(typedef) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## typedef
##

Expecting a list of type definitions followed by a closing parenthesis.

module_: LPAREN MODULE VALTYPE
##
## Ends in an error in state: 91.
##
## module_ -> LPAREN MODULE . option(ID) list(modulefield) RPAREN EOF [ # ]
##
## The known suffix of the stack is as follows:
## LPAREN MODULE
##

Expecting a module identifier or a module field.

module_: LPAREN MODULE ID VALTYPE
##
## Ends in an error in state: 92.
##
## module_ -> LPAREN MODULE option(ID) . list(modulefield) RPAREN EOF [ # ]
##
## The known suffix of the stack is as follows:
## LPAREN MODULE option(ID)
##

Expecting a module field, or a closing parenthesis.

module_: LPAREN MODULE LPAREN VALTYPE
##
## Ends in an error in state: 93.
##
## func -> LPAREN . FUNC option(ID) typeuse(locals(list(instr))) RPAREN [ RPAREN LPAREN EOF ]
## global -> LPAREN . GLOBAL option(ID) globaldesc RPAREN [ RPAREN LPAREN EOF ]
## import -> LPAREN . IMPORT name name importdesc RPAREN [ RPAREN LPAREN EOF ]
## rectype -> LPAREN . REC list(typedef) RPAREN [ RPAREN LPAREN EOF ]
## typedef -> LPAREN . TYPE option(ID) subtype RPAREN [ RPAREN LPAREN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expecting a module field.

module_: LPAREN IMPORT VALTYPE
##
## Ends in an error in state: 94.
##
## import -> LPAREN IMPORT . name name importdesc RPAREN [ RPAREN LPAREN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN IMPORT
##

Expecting an imported module name.

module_: LPAREN IMPORT STRING VALTYPE
##
## Ends in an error in state: 96.
##
## import -> LPAREN IMPORT name . name importdesc RPAREN [ RPAREN LPAREN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN IMPORT name
##

Expecting an imported name.

module_: LPAREN IMPORT STRING STRING VALTYPE
##
## Ends in an error in state: 97.
##
## import -> LPAREN IMPORT name name . importdesc RPAREN [ RPAREN LPAREN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN IMPORT name name
##

Expecting an import descriptor.

module_: LPAREN GLOBAL LPAREN MUT TYPE
##
## Ends in an error in state: 102.
##
## globaltype -> LPAREN MUT . valtype RPAREN [ STRUCT_NEW RPAREN REF_NULL REF_FUNC LPAREN I32_CONST ARRAY_NEW_FIXED ]
##
## The known suffix of the stack is as follows:
## LPAREN MUT
##

Expecting a value type.

module_: LPAREN GLOBAL LPAREN MUT VALTYPE VALTYPE
##
## Ends in an error in state: 103.
##
## globaltype -> LPAREN MUT valtype . RPAREN [ STRUCT_NEW RPAREN REF_NULL REF_FUNC LPAREN I32_CONST ARRAY_NEW_FIXED ]
##
## The known suffix of the stack is as follows:
## LPAREN MUT valtype
##

Expecting a closing parenthesis.

module_: LPAREN GLOBAL LPAREN IMPORT VALTYPE
##
## Ends in an error in state: 122.
##
## globaldesc -> LPAREN IMPORT . name name RPAREN globaltype [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN IMPORT
##

Expecting an import module name.

module_: LPAREN GLOBAL LPAREN IMPORT STRING VALTYPE
##
## Ends in an error in state: 123.
##
## globaldesc -> LPAREN IMPORT name . name RPAREN globaltype [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN IMPORT name
##

Expecting an import name.

module_: LPAREN GLOBAL LPAREN IMPORT STRING STRING VALTYPE
##
## Ends in an error in state: 124.
##
## globaldesc -> LPAREN IMPORT name name . RPAREN globaltype [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN IMPORT name name
##

Expecting an opening parenthesis.

module_: LPAREN GLOBAL LPAREN IMPORT STRING STRING RPAREN TYPE
##
## Ends in an error in state: 125.
##
## globaldesc -> LPAREN IMPORT name name RPAREN . globaltype [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN IMPORT name name RPAREN
##

Expecting a global type.

module_: LPAREN GLOBAL LPAREN IMPORT STRING STRING RPAREN LPAREN VALTYPE
##
## Ends in an error in state: 101.
##
## globaltype -> LPAREN . MUT valtype RPAREN [ RPAREN ]
## reftype -> LPAREN . REF boption(NULL) heaptype RPAREN [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expecting 'mut' for a global type or 'ref' for a reference type.

module_: LPAREN GLOBAL LPAREN EXPORT VALTYPE
##
## Ends in an error in state: 127.
##
## globaldesc -> LPAREN EXPORT . name RPAREN globaldesc [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN EXPORT
##

Expecting an export name.

module_: LPAREN GLOBAL LPAREN EXPORT STRING VALTYPE
##
## Ends in an error in state: 128.
##
## globaldesc -> LPAREN EXPORT name . RPAREN globaldesc [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN EXPORT name
##

Expecting a closing parenthesis.

module_: LPAREN IMPORT STRING STRING LPAREN VALTYPE
##
## Ends in an error in state: 98.
##
## importdesc -> LPAREN . FUNC option(ID) typeuse(RPAREN) [ RPAREN ]
## importdesc -> LPAREN . GLOBAL option(ID) globaltype RPAREN [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Expecting an import descriptor.

module_: LPAREN IMPORT STRING STRING LPAREN GLOBAL TYPE
##
## Ends in an error in state: 99.
##
## importdesc -> LPAREN GLOBAL . option(ID) globaltype RPAREN [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN GLOBAL
##

Expecting a global identifier or a global type.

module_: LPAREN IMPORT STRING STRING LPAREN GLOBAL ID TYPE
##
## Ends in an error in state: 100.
##
## importdesc -> LPAREN GLOBAL option(ID) . globaltype RPAREN [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN GLOBAL option(ID)
##

Expecting a global type.

module_: LPAREN IMPORT STRING STRING LPAREN GLOBAL VALTYPE VALTYPE
##
## Ends in an error in state: 106.
##
## importdesc -> LPAREN GLOBAL option(ID) globaltype . RPAREN [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN GLOBAL option(ID) globaltype
##

Expecting a closing parenthesis.

module_: LPAREN IMPORT STRING STRING LPAREN FUNC VALTYPE
##
## Ends in an error in state: 108.
##
## importdesc -> LPAREN FUNC . option(ID) typeuse(RPAREN) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN FUNC
##

Expecting a function identifier or a type use.

module_: LPAREN IMPORT STRING STRING LPAREN FUNC ID VALTYPE
##
## Ends in an error in state: 109.
##
## importdesc -> LPAREN FUNC option(ID) . typeuse(RPAREN) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN FUNC option(ID)
##

Expecting a type use.

module_: LPAREN IMPORT STRING STRING LPAREN FUNC LPAREN TYPE VALTYPE
##
## Ends in an error in state: 111.
##
## typeuse(RPAREN) -> LPAREN TYPE . idx RPAREN params_and_results(RPAREN) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN TYPE
##

Expecting a type index.

module_: LPAREN IMPORT STRING STRING LPAREN FUNC LPAREN TYPE NAT VALTYPE
##
## Ends in an error in state: 112.
##
## typeuse(RPAREN) -> LPAREN TYPE idx . RPAREN params_and_results(RPAREN) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN TYPE idx
##

Expecting a closing parenthesis.

module_: LPAREN IMPORT STRING STRING LPAREN FUNC RPAREN VALTYPE
##
## Ends in an error in state: 117.
##
## import -> LPAREN IMPORT name name importdesc . RPAREN [ RPAREN LPAREN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN IMPORT name name importdesc
##

Expecting a closing parenthesis.

module_: LPAREN GLOBAL VALTYPE VALTYPE
##
## Ends in an error in state: 130.
##
## globaldesc -> globaltype . expr [ RPAREN ]
##
## The known suffix of the stack is as follows:
## globaltype
##

Expecting an expression.

module_: LPAREN GLOBAL VALTYPE STRUCT_NEW VALTYPE
##
## Ends in an error in state: 131.
##
## plaininstr -> STRUCT_NEW . idx [ STRUCT_NEW RPAREN REF_NULL REF_FUNC LPAREN I32_CONST ARRAY_NEW_FIXED ]
##
## The known suffix of the stack is as follows:
## STRUCT_NEW
##

Expecting a type index.

module_: LPAREN GLOBAL VALTYPE REF_NULL VALTYPE
##
## Ends in an error in state: 133.
##
## plaininstr -> REF_NULL . heaptype [ STRUCT_NEW RPAREN REF_NULL REF_FUNC LPAREN I32_CONST ARRAY_NEW_FIXED ]
##
## The known suffix of the stack is as follows:
## REF_NULL
##

Expecting a heap type.

module_: LPAREN GLOBAL VALTYPE REF_FUNC VALTYPE
##
## Ends in an error in state: 135.
##
## plaininstr -> REF_FUNC . idx [ STRUCT_NEW RPAREN REF_NULL REF_FUNC LPAREN I32_CONST ARRAY_NEW_FIXED ]
##
## The known suffix of the stack is as follows:
## REF_FUNC
##

Expecting a function index.

module_: LPAREN GLOBAL VALTYPE I32_CONST VALTYPE
##
## Ends in an error in state: 138.
##
## plaininstr -> I32_CONST . i32 [ STRUCT_NEW RPAREN REF_NULL REF_FUNC LPAREN I32_CONST ARRAY_NEW_FIXED ]
##
## The known suffix of the stack is as follows:
## I32_CONST
##

Expecting an integer constant.

module_: LPAREN GLOBAL VALTYPE ARRAY_NEW_FIXED VALTYPE
##
## Ends in an error in state: 142.
##
## plaininstr -> ARRAY_NEW_FIXED . idx u32 [ STRUCT_NEW RPAREN REF_NULL REF_FUNC LPAREN I32_CONST ARRAY_NEW_FIXED ]
##
## The known suffix of the stack is as follows:
## ARRAY_NEW_FIXED
##

Expecting a type index.

module_: LPAREN GLOBAL VALTYPE ARRAY_NEW_FIXED NAT VALTYPE
##
## Ends in an error in state: 143.
##
## plaininstr -> ARRAY_NEW_FIXED idx . u32 [ STRUCT_NEW RPAREN REF_NULL REF_FUNC LPAREN I32_CONST ARRAY_NEW_FIXED ]
##
## The known suffix of the stack is as follows:
## ARRAY_NEW_FIXED idx
##

Expecting an unsigned 32-bit integer.

module_: LPAREN GLOBAL VALTYPE I32_CONST INT VALTYPE
##
## Ends in an error in state: 152.
##
## list(instr) -> instr . list(instr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## instr
##

Expecting a sequence of instructions followed by a closing parenthesis.

module_: LPAREN GLOBAL LPAREN IMPORT STRING STRING RPAREN VALTYPE VALTYPE
##
## Ends in an error in state: 157.
##
## global -> LPAREN GLOBAL option(ID) globaldesc . RPAREN [ RPAREN LPAREN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN GLOBAL option(ID) globaldesc
##

Expecting ')'.

module_: LPAREN REC RPAREN VALTYPE
##
## Ends in an error in state: 195.
##
## list(modulefield) -> modulefield . list(modulefield) [ RPAREN EOF ]
##
## The known suffix of the stack is as follows:
## modulefield
##

Expecting a list of module fields.

module_: LPAREN MODULE LPAREN REC RPAREN EOF
##
## Ends in an error in state: 200.
##
## module_ -> LPAREN MODULE option(ID) list(modulefield) . RPAREN EOF [ # ]
##
## The known suffix of the stack is as follows:
## LPAREN MODULE option(ID) list(modulefield)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 195, spurious reduction of production list(modulefield) ->
## In state 196, spurious reduction of production list(modulefield) -> modulefield list(modulefield)
##

Expecting a module field or a closing parenthesis.

module_: LPAREN MODULE RPAREN VALTYPE
##
## Ends in an error in state: 201.
##
## module_ -> LPAREN MODULE option(ID) list(modulefield) RPAREN . EOF [ # ]
##
## The known suffix of the stack is as follows:
## LPAREN MODULE option(ID) list(modulefield) RPAREN
##

Garbage after the end of the module. Maybe you have closed too many parentheses.

module_: LPAREN REC RPAREN RPAREN
##
## Ends in an error in state: 204.
##
## module_ -> list(modulefield) . EOF [ # ]
##
## The known suffix of the stack is as follows:
## list(modulefield)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 195, spurious reduction of production list(modulefield) ->
## In state 196, spurious reduction of production list(modulefield) -> modulefield list(modulefield)
##

Expecting a module field.

module_: VALTYPE
##
## Ends in an error in state: 0.
##
## module_' -> . module_ [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN TYPE VALTYPE
##
## Ends in an error in state: 2.
##
## typedef -> LPAREN TYPE . option(ID) subtype RPAREN [ RPAREN LPAREN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN TYPE ID VALTYPE
##
## Ends in an error in state: 4.
##
## typedef -> LPAREN TYPE option(ID) . subtype RPAREN [ RPAREN LPAREN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN TYPE option(ID)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN TYPE LPAREN SUB VALTYPE
##
## Ends in an error in state: 6.
##
## subtype -> LPAREN SUB . boption(FINAL) option(idx) comptype RPAREN [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN SUB
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN TYPE LPAREN SUB FINAL VALTYPE
##
## Ends in an error in state: 8.
##
## subtype -> LPAREN SUB boption(FINAL) . option(idx) comptype RPAREN [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN SUB boption(FINAL)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN TYPE LPAREN SUB NAT VALTYPE
##
## Ends in an error in state: 12.
##
## subtype -> LPAREN SUB boption(FINAL) option(idx) . comptype RPAREN [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN SUB boption(FINAL) option(idx)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN TYPE LPAREN ARRAY LPAREN VALTYPE
##
## Ends in an error in state: 19.
##
## fieldtype -> LPAREN . MUT storagetype RPAREN [ VALTYPE RPAREN PACKEDTYPE LPAREN ]
## reftype -> LPAREN . REF boption(NULL) heaptype RPAREN [ VALTYPE RPAREN PACKEDTYPE LPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN GLOBAL LPAREN REF VALTYPE
##
## Ends in an error in state: 20.
##
## reftype -> LPAREN REF . boption(NULL) heaptype RPAREN [ VALTYPE STRUCT_NEW RPAREN REF_NULL REF_FUNC PACKEDTYPE LPAREN I32_CONST ARRAY_NEW_FIXED ]
##
## The known suffix of the stack is as follows:
## LPAREN REF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN GLOBAL LPAREN REF NULL VALTYPE
##
## Ends in an error in state: 22.
##
## reftype -> LPAREN REF boption(NULL) . heaptype RPAREN [ VALTYPE STRUCT_NEW RPAREN REF_NULL REF_FUNC PACKEDTYPE LPAREN I32_CONST ARRAY_NEW_FIXED ]
##
## The known suffix of the stack is as follows:
## LPAREN REF boption(NULL)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN GLOBAL LPAREN REF NAT VALTYPE
##
## Ends in an error in state: 34.
##
## reftype -> LPAREN REF boption(NULL) heaptype . RPAREN [ VALTYPE STRUCT_NEW RPAREN REF_NULL REF_FUNC PACKEDTYPE LPAREN I32_CONST ARRAY_NEW_FIXED ]
##
## The known suffix of the stack is as follows:
## LPAREN REF boption(NULL) heaptype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN TYPE LPAREN FUNC VALTYPE
##
## Ends in an error in state: 54.
##
## functype -> LPAREN FUNC . params_and_results(RPAREN) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN TYPE LPAREN FUNC LPAREN PARAM ID VALTYPE RPAREN VALTYPE
##
## Ends in an error in state: 67.
##
## params(results(RPAREN)) -> LPAREN PARAM ID valtype RPAREN . params(results(RPAREN)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN PARAM ID valtype RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN TYPE LPAREN FUNC LPAREN PARAM RPAREN VALTYPE
##
## Ends in an error in state: 71.
##
## params(results(RPAREN)) -> LPAREN PARAM list(valtype) RPAREN . params(results(RPAREN)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN PARAM list(valtype) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN IMPORT STRING STRING LPAREN FUNC LPAREN VALTYPE
##
## Ends in an error in state: 110.
##
## params(results(RPAREN)) -> LPAREN . PARAM ID valtype RPAREN params(results(RPAREN)) [ RPAREN ]
## params(results(RPAREN)) -> LPAREN . PARAM list(valtype) RPAREN params(results(RPAREN)) [ RPAREN ]
## results(RPAREN) -> LPAREN . RESULT list(valtype) RPAREN results(RPAREN) [ RPAREN ]
## typeuse(RPAREN) -> LPAREN . TYPE idx RPAREN params_and_results(RPAREN) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN IMPORT STRING STRING LPAREN FUNC LPAREN TYPE NAT RPAREN VALTYPE
##
## Ends in an error in state: 113.
##
## typeuse(RPAREN) -> LPAREN TYPE idx RPAREN . params_and_results(RPAREN) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN TYPE idx RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN GLOBAL TYPE
##
## Ends in an error in state: 119.
##
## global -> LPAREN GLOBAL . option(ID) globaldesc RPAREN [ RPAREN LPAREN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN GLOBAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN GLOBAL ID TYPE
##
## Ends in an error in state: 120.
##
## global -> LPAREN GLOBAL option(ID) . globaldesc RPAREN [ RPAREN LPAREN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN GLOBAL option(ID)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN GLOBAL LPAREN VALTYPE
##
## Ends in an error in state: 121.
##
## globaldesc -> LPAREN . IMPORT name name RPAREN globaltype [ RPAREN ]
## globaldesc -> LPAREN . EXPORT name RPAREN globaldesc [ RPAREN ]
## globaltype -> LPAREN . MUT valtype RPAREN [ STRUCT_NEW RPAREN REF_NULL REF_FUNC LPAREN I32_CONST ARRAY_NEW_FIXED ]
## reftype -> LPAREN . REF boption(NULL) heaptype RPAREN [ STRUCT_NEW RPAREN REF_NULL REF_FUNC LPAREN I32_CONST ARRAY_NEW_FIXED ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN GLOBAL LPAREN EXPORT STRING RPAREN TYPE
##
## Ends in an error in state: 129.
##
## globaldesc -> LPAREN EXPORT name RPAREN . globaldesc [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN EXPORT name RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN GLOBAL VALTYPE LPAREN VALTYPE
##
## Ends in an error in state: 137.
##
## foldedinstr -> LPAREN . plaininstr list(foldedinstr) RPAREN [ STRUCT_NEW RPAREN REF_NULL REF_FUNC LPAREN I32_CONST ARRAY_NEW_FIXED ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN I32_CONST INT VALTYPE
##
## Ends in an error in state: 145.
##
## foldedinstr -> LPAREN plaininstr . list(foldedinstr) RPAREN [ STRUCT_NEW RPAREN REF_NULL REF_FUNC LPAREN I32_CONST ARRAY_NEW_FIXED ]
##
## The known suffix of the stack is as follows:
## LPAREN plaininstr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN I32_CONST INT LPAREN I32_CONST INT RPAREN VALTYPE
##
## Ends in an error in state: 148.
##
## list(foldedinstr) -> foldedinstr . list(foldedinstr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## foldedinstr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC VALTYPE
##
## Ends in an error in state: 159.
##
## func -> LPAREN FUNC . option(ID) typeuse(locals(list(instr))) RPAREN [ RPAREN LPAREN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC ID VALTYPE
##
## Ends in an error in state: 160.
##
## func -> LPAREN FUNC option(ID) . typeuse(locals(list(instr))) RPAREN [ RPAREN LPAREN EOF ]
##
## The known suffix of the stack is as follows:
## LPAREN FUNC option(ID)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN VALTYPE
##
## Ends in an error in state: 161.
##
## foldedinstr -> LPAREN . plaininstr list(foldedinstr) RPAREN [ STRUCT_NEW RPAREN REF_NULL REF_FUNC LPAREN I32_CONST ARRAY_NEW_FIXED ]
## locals(list(instr)) -> LPAREN . LOCAL option(ID) valtype RPAREN locals(list(instr)) [ RPAREN ]
## params(results(locals(list(instr)))) -> LPAREN . PARAM ID valtype RPAREN params(results(locals(list(instr)))) [ RPAREN ]
## params(results(locals(list(instr)))) -> LPAREN . PARAM list(valtype) RPAREN params(results(locals(list(instr)))) [ RPAREN ]
## results(locals(list(instr))) -> LPAREN . RESULT list(valtype) RPAREN results(locals(list(instr))) [ RPAREN ]
## typeuse(locals(list(instr))) -> LPAREN . TYPE idx RPAREN params_and_results(locals(list(instr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN TYPE VALTYPE
##
## Ends in an error in state: 162.
##
## typeuse(locals(list(instr))) -> LPAREN TYPE . idx RPAREN params_and_results(locals(list(instr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN TYPE NAT VALTYPE
##
## Ends in an error in state: 163.
##
## typeuse(locals(list(instr))) -> LPAREN TYPE idx . RPAREN params_and_results(locals(list(instr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN TYPE idx
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN TYPE NAT RPAREN VALTYPE
##
## Ends in an error in state: 164.
##
## typeuse(locals(list(instr))) -> LPAREN TYPE idx RPAREN . params_and_results(locals(list(instr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN TYPE idx RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN PARAM RPAREN LPAREN VALTYPE
##
## Ends in an error in state: 165.
##
## foldedinstr -> LPAREN . plaininstr list(foldedinstr) RPAREN [ STRUCT_NEW RPAREN REF_NULL REF_FUNC LPAREN I32_CONST ARRAY_NEW_FIXED ]
## locals(list(instr)) -> LPAREN . LOCAL option(ID) valtype RPAREN locals(list(instr)) [ RPAREN ]
## params(results(locals(list(instr)))) -> LPAREN . PARAM ID valtype RPAREN params(results(locals(list(instr)))) [ RPAREN ]
## params(results(locals(list(instr)))) -> LPAREN . PARAM list(valtype) RPAREN params(results(locals(list(instr)))) [ RPAREN ]
## results(locals(list(instr))) -> LPAREN . RESULT list(valtype) RPAREN results(locals(list(instr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN RESULT TYPE
##
## Ends in an error in state: 166.
##
## results(locals(list(instr))) -> LPAREN RESULT . list(valtype) RPAREN results(locals(list(instr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN RESULT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN RESULT RPAREN VALTYPE
##
## Ends in an error in state: 168.
##
## results(locals(list(instr))) -> LPAREN RESULT list(valtype) RPAREN . results(locals(list(instr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN RESULT list(valtype) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN RESULT RPAREN LPAREN VALTYPE
##
## Ends in an error in state: 169.
##
## foldedinstr -> LPAREN . plaininstr list(foldedinstr) RPAREN [ STRUCT_NEW RPAREN REF_NULL REF_FUNC LPAREN I32_CONST ARRAY_NEW_FIXED ]
## locals(list(instr)) -> LPAREN . LOCAL option(ID) valtype RPAREN locals(list(instr)) [ RPAREN ]
## results(locals(list(instr))) -> LPAREN . RESULT list(valtype) RPAREN results(locals(list(instr))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN LOCAL TYPE
##
## Ends in an error in state: 170.
##
## locals(list(instr)) -> LPAREN LOCAL . option(ID) valtype RPAREN locals(list(instr)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN LOCAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN LOCAL ID TYPE
##
## Ends in an error in state: 171.
##
## locals(list(instr)) -> LPAREN LOCAL option(ID) . valtype RPAREN locals(list(instr)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN LOCAL option(ID)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN LOCAL VALTYPE VALTYPE
##
## Ends in an error in state: 172.
##
## locals(list(instr)) -> LPAREN LOCAL option(ID) valtype . RPAREN locals(list(instr)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN LOCAL option(ID) valtype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN LOCAL VALTYPE RPAREN VALTYPE
##
## Ends in an error in state: 173.
##
## locals(list(instr)) -> LPAREN LOCAL option(ID) valtype RPAREN . locals(list(instr)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN LOCAL option(ID) valtype RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN LOCAL VALTYPE RPAREN LPAREN VALTYPE
##
## Ends in an error in state: 174.
##
## foldedinstr -> LPAREN . plaininstr list(foldedinstr) RPAREN [ STRUCT_NEW RPAREN REF_NULL REF_FUNC LPAREN I32_CONST ARRAY_NEW_FIXED ]
## locals(list(instr)) -> LPAREN . LOCAL option(ID) valtype RPAREN locals(list(instr)) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN PARAM TYPE
##
## Ends in an error in state: 179.
##
## params(results(locals(list(instr)))) -> LPAREN PARAM . ID valtype RPAREN params(results(locals(list(instr)))) [ RPAREN ]
## params(results(locals(list(instr)))) -> LPAREN PARAM . list(valtype) RPAREN params(results(locals(list(instr)))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN PARAM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN PARAM ID TYPE
##
## Ends in an error in state: 180.
##
## params(results(locals(list(instr)))) -> LPAREN PARAM ID . valtype RPAREN params(results(locals(list(instr)))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN PARAM ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN PARAM ID VALTYPE VALTYPE
##
## Ends in an error in state: 181.
##
## params(results(locals(list(instr)))) -> LPAREN PARAM ID valtype . RPAREN params(results(locals(list(instr)))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN PARAM ID valtype
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN PARAM ID VALTYPE RPAREN VALTYPE
##
## Ends in an error in state: 182.
##
## params(results(locals(list(instr)))) -> LPAREN PARAM ID valtype RPAREN . params(results(locals(list(instr)))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN PARAM ID valtype RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

module_: LPAREN FUNC LPAREN PARAM RPAREN VALTYPE
##
## Ends in an error in state: 186.
##
## params(results(locals(list(instr)))) -> LPAREN PARAM list(valtype) RPAREN . params(results(locals(list(instr)))) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## LPAREN PARAM list(valtype) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>
