
fn parse_int (&eq, i32, &string) -> i32

fn format_int (&eq, i32, i32) -> &eq
type string = [mut i8]

type compare = fn(&eq, &eq, i32)->i32

type hash = fn(&eq)->i32

type fixed_length = {bsize_32 :i32, bsize_64 : i32}

type serialize = fn(&eq, &eq, i32) -> (i32, i32)
type deserialize = fn(&eq) -> (&eq, i32)
type dup = fn(&eq)->&eq

type custom_operations =
  { id : &string,
    compare: &?compare,
    compare_ext : &?compare,
    hash : &?hash,
    fixed_length: &?fixed_length,
    serialize : &?serialize,
    deserialize : &?deserialize,
    dup : &?dup }

type custom open = { ops : &custom_operations }

let int32_ops : &custom_operations =
  custom_operations {id :"_i",
     compare : &int32_cmp,
     compare_ext : null,
     hash : &int32_hash,
     fixed_length : fixed_length {bsize_32 :4, bsize_64 : 4},
     serialize: &int32_serialize,
     deserialize: &int32_deserialize,
     dup: &int32_dup}

type int32 : custom = {ops:  &custom_operations, value:i32}

fn int32_cmp (v1 : &eq, v2 : &eq, &eq) -> i32 {
  let i1 = (v1 as &int32).value
  let i2 = (v2 as &int32).value
  (i1 >u i2) - (i1 <u i2)
}

fn int32_hash (v : &eq) -> i32 {
  (v as &int32).value
}

fn int32_serialize (s : &eq, v : &eq) -> (i32, i32) {
  caml_serialize_int_4(s, (v as &int32).value)
  (4, 4)
}

fn int32_deserialize (s : &eq) -> (&eq, i32) {
  (int32 {ops:int32_ops, value:caml_deserialize_int_4(s)}, 4)
}

fn int32_dup (v : &eq) -> &eq {
  let d = v as &int32
  int32 {ops : d.ops, value : d.value}
}

fn caml_copy_int32 (i : i32) -> &eq {
  int32{ops : int32_ops, value : i}
}

fn Int32_val (i : &eq) -> i32 {
  (i as &int32).value
}

let INT32_ERRMSG : &string = "Int32.of_string"

fn caml_int32_of_string(v: &eq) -> &eq {
  caml_copy_int32(parse_int(v, 32, INT32_ERRMSG))
}
